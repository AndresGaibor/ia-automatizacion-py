#!/usr/bin/env python3
"""
Herramienta permanente para analizar archivos Excel generados
"""

import sys
sys.path.insert(0, '.')

import pandas as pd
from glob import glob
import argparse
import os
from datetime import datetime

def analyze_excel_file(file_path: str, detailed: bool = False):
    """Analiza un archivo Excel espec√≠fico"""

    print(f"üìä ANALIZANDO: {file_path}")
    print("=" * 80)

    try:
        xl_file = pd.ExcelFile(file_path)
        print(f"üìã Hojas encontradas: {xl_file.sheet_names}")

        total_subs = 0
        total_assigned = 0
        results = {}

        for sheet_name in xl_file.sheet_names:
            print(f"\nüîç HOJA: {sheet_name}")
            print("-" * 50)

            df = pd.read_excel(file_path, sheet_name=sheet_name)
            print(f"üìè Dimensiones: {df.shape[0]} filas x {df.shape[1]} columnas")

            # Mostrar columnas
            print(f"üè∑Ô∏è  Columnas: {list(df.columns)}")

            if 'Lista' in df.columns:
                non_null = df['Lista'].notna().sum()
                null_count = df['Lista'].isna().sum()
                total = len(df)

                total_subs += total
                total_assigned += non_null

                fill_rate = (non_null / total * 100) if total > 0 else 0

                print("üìä An√°lisis columna 'Lista':")
                print(f"   ‚úÖ Asignadas: {non_null}")
                print(f"   ‚ùå Vac√≠as: {null_count}")
                print(f"   üìà Total: {total}")
                print(f"   üéØ Tasa completitud: {fill_rate:.1f}%")

                results[sheet_name] = {
                    'total': total,
                    'assigned': non_null,
                    'empty': null_count,
                    'fill_rate': fill_rate
                }

                # Mostrar listas √∫nicas
                unique_lists = df['Lista'].dropna().unique()
                if len(unique_lists) > 0:
                    print(f"   üìã Listas encontradas ({len(unique_lists)}):")
                    for lista in sorted(unique_lists):
                        count = (df['Lista'] == lista).sum()
                        print(f"      ‚Ä¢ {lista}: {count} suscriptores")
                else:
                    print("   ‚ö†Ô∏è  Sin listas espec√≠ficas")

                if detailed and non_null > 0:
                    print("   üìß Primeros 5 emails con lista:")
                    sample = df[df['Lista'].notna()].head(5)
                    for _, row in sample.iterrows():
                        if 'Correo' in row:
                            print(f"      ‚Ä¢ {row['Correo']} ‚Üí {row['Lista']}")

            else:
                print("   ‚ÑπÔ∏è  No tiene columna 'Lista'")
                results[sheet_name] = {'no_lista_column': True}

        # Resumen general
        print("\nüéâ RESUMEN GENERAL")
        print("=" * 60)
        print(f"üìä Total suscriptores: {total_subs}")
        print(f"‚úÖ Con lista asignada: {total_assigned}")
        print(f"‚ùå Sin lista: {total_subs - total_assigned}")

        if total_subs > 0:
            overall_rate = (total_assigned / total_subs) * 100
            print(f"üéØ Tasa general de completitud: {overall_rate:.1f}%")

            if overall_rate > 80:
                print("üéâ ¬°EXCELENTE! Muy buena asignaci√≥n de listas")
            elif overall_rate > 50:
                print("‚ö†Ô∏è  REGULAR: Necesita mejoras")
            else:
                print("‚ùå PROBLEM√ÅTICO: Muchas listas vac√≠as")

        return results

    except Exception as e:
        print(f"‚ùå Error analizando archivo: {e}")
        return None

def find_latest_excel_files(pattern: str = "*xlsx", directory: str = "data/suscriptores"):
    """Encuentra los archivos Excel m√°s recientes"""

    files = glob(f"{directory}/{pattern}")
    # Filtrar archivos temporales
    files = [f for f in files if not f.split('/')[-1].startswith('~$')]

    if not files:
        return []

    # Ordenar por fecha de modificaci√≥n (m√°s reciente primero)
    files.sort(key=lambda x: datetime.fromtimestamp(os.path.getmtime(x)), reverse=True)

    return files

def compare_excel_files(file1: str, file2: str):
    """Compara dos archivos Excel para ver mejoras"""

    print("üîÑ COMPARANDO ARCHIVOS")
    print("=" * 60)
    print(f"üìä Archivo 1: {file1}")
    print(f"üìä Archivo 2: {file2}")

    results1 = analyze_excel_file(file1, detailed=False)
    print("\n" + "="*80 + "\n")
    results2 = analyze_excel_file(file2, detailed=False)

    if results1 and results2:
        print("\nüîÑ COMPARACI√ìN DE RESULTADOS")
        print("=" * 60)

        for sheet in results1:
            if sheet in results2 and 'fill_rate' in results1[sheet] and 'fill_rate' in results2[sheet]:
                rate1 = results1[sheet]['fill_rate']
                rate2 = results2[sheet]['fill_rate']
                diff = rate2 - rate1

                if diff > 0:
                    print(f"‚úÖ {sheet}: {rate1:.1f}% ‚Üí {rate2:.1f}% (‚Üë {diff:+.1f}%)")
                elif diff < 0:
                    print(f"‚ùå {sheet}: {rate1:.1f}% ‚Üí {rate2:.1f}% (‚Üì {diff:+.1f}%)")
                else:
                    print(f"‚û°Ô∏è {sheet}: {rate1:.1f}% ‚Üí {rate2:.1f}% (sin cambio)")

def main():
    parser = argparse.ArgumentParser(description='Analizar archivos Excel de campa√±as')
    parser.add_argument('--file', type=str, help='Archivo espec√≠fico a analizar')
    parser.add_argument('--latest', action='store_true', help='Analizar archivo m√°s reciente')
    parser.add_argument('--compare', action='store_true', help='Comparar los 2 archivos m√°s recientes')
    parser.add_argument('--detailed', action='store_true', help='An√°lisis detallado')
    parser.add_argument('--pattern', type=str, default='*xlsx', help='Patr√≥n de b√∫squeda de archivos')

    args = parser.parse_args()


    if args.file:
        analyze_excel_file(args.file, detailed=args.detailed)

    elif args.compare:
        files = find_latest_excel_files(args.pattern)
        if len(files) >= 2:
            compare_excel_files(files[1], files[0])  # Segundo m√°s reciente vs m√°s reciente
        else:
            print("‚ùå Se necesitan al menos 2 archivos para comparar")

    elif args.latest:
        files = find_latest_excel_files(args.pattern)
        if files:
            analyze_excel_file(files[0], detailed=args.detailed)
        else:
            print("‚ùå No se encontraron archivos Excel")

    else:
        files = find_latest_excel_files(args.pattern)
        if files:
            print(f"üìÅ Archivos Excel encontrados: {len(files)}")
            for i, file in enumerate(files[:5]):  # Mostrar los primeros 5
                print(f"  {i+1}. {file}")
            print("\nUse --latest para analizar el m√°s reciente o --file <ruta> para uno espec√≠fico")
        else:
            print("‚ùå No se encontraron archivos Excel")

if __name__ == "__main__":
    main()