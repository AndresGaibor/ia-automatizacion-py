#!/usr/bin/env python3
"""
Script de prueba para el sistema de logging de screenshots (sin Playwright)
Verifica que el sistema funcione correctamente sin necesidad de navegador
"""

import os
import sys
import tempfile
import json
from pathlib import Path

# Agregar src al path para importar m√≥dulos
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.enhanced_logger import (
    get_logger, get_main_logger, get_auth_logger, get_browser_logger,
    get_crear_lista_logger, get_listar_campanias_logger, PLAYWRIGHT_AVAILABLE
)

def test_screenshot_methods_without_playwright():
    """Prueba m√©todos de screenshot sin Playwright disponible"""
    print("üß™ Probando m√©todos de screenshot sin Playwright...")

    logger = get_main_logger()

    # Intentar capturar screenshot sin p√°gina (debe manejar graciosamente)
    screenshot_path = logger.capture_screenshot(
        None,  # No page
        "test_without_playwright",
        context={"test_type": "no_playwright"}
    )

    if screenshot_path is None:
        print("‚úÖ Screenshot sin Playwright manejado correctamente (devuelve None)")
    else:
        print("‚ùå Screenshot sin Playwright no manejado correctamente")

    # Verificar que se logge√≥ la advertencia apropiada
    print("   üìÑ Verificando log de advertencia...")

def test_error_logging_without_page():
    """Prueba logging de errores sin p√°gina"""
    print("üß™ Probando logging de errores sin p√°gina...")

    logger = get_browser_logger()

    try:
        # Simular error sin p√°gina
        raise ValueError("Error de prueba sin p√°gina")
    except Exception as e:
        # Log error sin p√°gina - no debe fallar
        logger.error("Error sin p√°gina", error=e, page=None,
                    context={"test_type": "no_page_error"})

        print("‚úÖ Error sin p√°gina loggeado correctamente")

def test_operation_context_without_page():
    """Prueba contexto de operaci√≥n sin p√°gina"""
    print("üß™ Probando contexto de operaci√≥n sin p√°gina...")

    logger = get_crear_lista_logger()

    try:
        with logger.operation("test_operation_no_page", {"test": True}, page=None) as op:
            op.log_progress("Operaci√≥n sin p√°gina iniciada")
            # Simular error
            raise RuntimeError("Error en operaci√≥n sin p√°gina")
    except RuntimeError:
        print("‚úÖ Operaci√≥n sin p√°gina manejada correctamente")

def test_browser_error_methods():
    """Prueba m√©todos espec√≠ficos de errores del navegador"""
    print("üß™ Probando m√©todos de errores del navegador...")

    logger = get_browser_logger()

    # Simular error del navegador sin p√°gina
    test_error = Exception("Error simulado del navegador")

    logger.log_browser_error(
        "test_action",
        test_error,
        page=None,  # Sin p√°gina
        context={"element": "test_element", "url": "test.com"}
    )

    print("‚úÖ Error del navegador sin p√°gina loggeado correctamente")

def test_operation_failure_method():
    """Prueba m√©todo de fallo de operaciones"""
    print("üß™ Probando m√©todo de fallo de operaciones...")

    logger = get_crear_lista_logger()

    logger.log_operation_failure(
        "test_operation",
        "Fallo simulado de operaci√≥n",
        page=None,  # Sin p√°gina
        context={
            "operation_id": "test_123",
            "users_processed": 10,
            "users_failed": 2
        }
    )

    print("‚úÖ Fallo de operaci√≥n sin p√°gina loggeado correctamente")

def verificar_logs_generados():
    """Verifica que se generen logs correctamente"""
    print("üß™ Verificando logs generados...")

    logger = get_main_logger()
    log_dir = logger.log_dir

    if not log_dir.exists():
        print("‚ö†Ô∏è Directorio de logs no existe")
        return

    # Buscar archivos JSON de hoy
    import datetime
    today = datetime.datetime.now().strftime("%Y%m%d")

    json_files = list(log_dir.glob(f"*_{today}.json"))
    print(f"üìÑ Archivos JSON encontrados: {len(json_files)}")

    screenshot_refs = 0
    error_logs = 0

    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        log_entry = json.loads(line.strip())

                        # Contar referencias a screenshots
                        if 'screenshot_path' in log_entry:
                            screenshot_refs += 1

                        # Contar logs de error
                        if log_entry.get('level') == 'ERROR':
                            error_logs += 1

                    except json.JSONDecodeError:
                        continue
        except Exception as e:
            print(f"  ‚ö†Ô∏è Error leyendo {json_file.name}: {e}")

    print(f"üìä Referencias a screenshots: {screenshot_refs}")
    print(f"üìä Logs de error: {error_logs}")
    print(f"üìä Sistema PLAYWRIGHT disponible: {PLAYWRIGHT_AVAILABLE}")

def test_screenshot_directory_creation():
    """Prueba que se cree el directorio de screenshots"""
    print("üß™ Probando creaci√≥n de directorio de screenshots...")

    logger = get_main_logger()
    screenshots_dir = logger.log_dir / "screenshots"

    # El directorio deber√≠a crearse cuando se intente capturar screenshot
    if screenshots_dir.exists():
        print(f"‚úÖ Directorio de screenshots existe: {screenshots_dir}")
    else:
        print(f"üìÇ Directorio de screenshots se crear√° cuando sea necesario: {screenshots_dir}")

def mostrar_funcionalidades_disponibles():
    """Muestra las funcionalidades disponibles del sistema"""
    print("üìã Funcionalidades del sistema de screenshots:")
    print(f"  üåê Playwright disponible: {PLAYWRIGHT_AVAILABLE}")
    print("  üì∏ M√©todos disponibles:")
    print("    ‚Ä¢ logger.capture_screenshot(page, name, context)")
    print("    ‚Ä¢ logger.log_browser_error(action, error, page, context)")
    print("    ‚Ä¢ logger.log_operation_failure(operation, details, page, context)")
    print("    ‚Ä¢ logger.error(message, error, page, **kwargs)")
    print("    ‚Ä¢ logger.critical(message, error, page, **kwargs)")
    print("    ‚Ä¢ logger.operation(name, context, page)")

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas del sistema de logging de screenshots")
    print("=" * 60)

    try:
        mostrar_funcionalidades_disponibles()
        print()

        test_screenshot_methods_without_playwright()
        print()

        test_error_logging_without_page()
        print()

        test_operation_context_without_page()
        print()

        test_browser_error_methods()
        print()

        test_operation_failure_method()
        print()

        test_screenshot_directory_creation()
        print()

        verificar_logs_generados()
        print()

        print("=" * 60)
        print("üéâ Todas las pruebas de logging completadas!")

        # Mostrar ubicaci√≥n de archivos
        logger = get_main_logger()
        print(f"\nüìÇ Archivos generados en:")
        print(f"  üìÑ Logs: {logger.log_dir}")
        print(f"  üì∏ Screenshots: {logger.log_dir / 'screenshots'}")

        if not PLAYWRIGHT_AVAILABLE:
            print("\nüí° Para habilitar screenshots autom√°ticos:")
            print("  1. Instala Playwright: pip install playwright")
            print("  2. Instala navegadores: playwright install")
            print("  3. El sistema detectar√° autom√°ticamente Playwright")

    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()