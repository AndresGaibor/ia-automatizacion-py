#!/usr/bin/env python3
"""
Script de prueba para el sistema de screenshots autom√°ticos
Simula errores para verificar que las capturas se generen correctamente
"""

import os
import sys
import tempfile
import json
from pathlib import Path

# Agregar src al path para importar m√≥dulos
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    from playwright.sync_api import sync_playwright
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    print("‚ö†Ô∏è Playwright no est√° disponible. Instalando...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "playwright"])
    subprocess.check_call([sys.executable, "-m", "playwright", "install", "chromium"])
    from playwright.sync_api import sync_playwright
    PLAYWRIGHT_AVAILABLE = True

from src.enhanced_logger import (
    get_logger, get_main_logger, get_auth_logger, get_browser_logger,
    get_crear_lista_logger, get_listar_campanias_logger
)

def test_manual_screenshot():
    """Prueba captura manual de screenshot"""
    print("üß™ Probando captura manual de screenshot...")

    logger = get_main_logger()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Ir a una p√°gina de prueba
            page.goto("https://example.com")

            # Capturar screenshot manual
            screenshot_path = logger.capture_screenshot(
                page,
                "test_manual",
                context={"test_type": "manual", "url": "example.com"}
            )

            if screenshot_path and os.path.exists(screenshot_path):
                print(f"‚úÖ Screenshot manual capturado: {screenshot_path}")
                size = os.path.getsize(screenshot_path)
                print(f"   üìè Tama√±o: {size} bytes")
            else:
                print("‚ùå Screenshot manual fall√≥")

        finally:
            context.close()
            browser.close()

def test_automatic_error_screenshot():
    """Prueba captura autom√°tica en errores"""
    print("üß™ Probando captura autom√°tica en errores...")

    logger = get_browser_logger()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Ir a una p√°gina de prueba
            page.goto("https://example.com")

            # Usar contexto de operaci√≥n con p√°gina - error autom√°tico
            with logger.operation("test_operation_error", {"test": "automatic_screenshot"}, page) as op:
                op.log_progress("Simulando operaci√≥n que fallar√°")

                # Simular error - elemento que no existe
                page.locator("elemento_que_no_existe").click(timeout=1000)

        except Exception:
            print("‚úÖ Error capturado (esperado) - screenshot autom√°tico generado")

        finally:
            context.close()
            browser.close()

def test_browser_error_logging():
    """Prueba logging espec√≠fico de errores del navegador"""
    print("üß™ Probando logging de errores del navegador...")

    logger = get_browser_logger()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Ir a una p√°gina de prueba
            page.goto("https://example.com")

            # Simular error del navegador
            try:
                page.locator("boton_inexistente").click(timeout=2000)
            except Exception as e:
                # Log espec√≠fico de error del navegador con screenshot
                logger.log_browser_error(
                    "click_boton_inexistente",
                    e,
                    page,
                    context={"elemento": "boton_inexistente", "url": "example.com"}
                )
                print("‚úÖ Error del navegador loggeado con screenshot")

        finally:
            context.close()
            browser.close()

def test_operation_failure_logging():
    """Prueba logging de fallos de operaciones"""
    print("üß™ Probando logging de fallos de operaciones...")

    logger = get_crear_lista_logger()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Ir a una p√°gina con contenido HTML
            page.goto("data:text/html,<html><body><h1>Test Page</h1><p>Error simulation page</p></body></html>")

            # Simular fallo de operaci√≥n
            logger.log_operation_failure(
                "crear_lista_test",
                "Simulaci√≥n de fallo en creaci√≥n de lista",
                page,
                context={
                    "lista_nombre": "test_lista",
                    "error_code": "SIM001",
                    "usuarios_procesados": 25,
                    "usuarios_fallidos": 3
                }
            )

            print("‚úÖ Fallo de operaci√≥n loggeado con screenshot")

        finally:
            context.close()
            browser.close()

def test_critical_error_with_page():
    """Prueba error cr√≠tico con p√°gina"""
    print("üß™ Probando error cr√≠tico con p√°gina...")

    logger = get_main_logger()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Crear una p√°gina con contenido personalizado
            html_content = """
            <html>
            <head><title>Error Test Page</title></head>
            <body>
                <h1>üö® P√°gina de Prueba de Error Cr√≠tico</h1>
                <div class="error-container">
                    <p>Esta p√°gina simula un error cr√≠tico del sistema.</p>
                    <div class="error-details">
                        <span>Error Code: CRIT_001</span>
                        <span>Timestamp: 2025-09-15 12:30:45</span>
                    </div>
                </div>
            </body>
            </html>
            """
            page.goto(f"data:text/html,{html_content}")

            # Simular error cr√≠tico
            try:
                raise RuntimeError("Error cr√≠tico simulado del sistema")
            except Exception as e:
                logger.critical(
                    "Error cr√≠tico del sistema detectado",
                    error=e,
                    page=page,
                    context={
                        "error_code": "CRIT_001",
                        "system_state": "critical",
                        "recovery_possible": False
                    }
                )
                print("‚úÖ Error cr√≠tico loggeado con screenshot")

        finally:
            context.close()
            browser.close()

def verificar_screenshots_generados():
    """Verifica que los screenshots se hayan generado correctamente"""
    print("üß™ Verificando screenshots generados...")

    # Obtener directorio de screenshots
    logger = get_main_logger()
    screenshots_dir = logger.log_dir / "screenshots"

    if not screenshots_dir.exists():
        print("‚ö†Ô∏è Directorio de screenshots no existe a√∫n")
        return

    # Listar screenshots generados
    screenshots = list(screenshots_dir.glob("*.png"))
    print(f"üì∏ Screenshots encontrados: {len(screenshots)}")

    for screenshot in screenshots:
        size = screenshot.stat().st_size
        print(f"  üìã {screenshot.name}: {size} bytes")

        # Verificar que el archivo no est√© corrupto (tama√±o m√≠nimo razonable)
        if size > 1000:  # Al menos 1KB
            print(f"    ‚úÖ Screenshot v√°lido")
        else:
            print(f"    ‚ö†Ô∏è Screenshot posiblemente corrupto (muy peque√±o)")

def verificar_logs_con_screenshots():
    """Verifica que los logs contengan referencias a screenshots"""
    print("üß™ Verificando logs con referencias a screenshots...")

    logger = get_main_logger()
    log_files = list(logger.log_dir.glob("*.json"))

    screenshot_refs = 0

    for log_file in log_files:
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        log_entry = json.loads(line.strip())
                        if 'screenshot_path' in log_entry:
                            screenshot_refs += 1
                            print(f"  üì∏ Screenshot referenciado: {log_entry.get('message', 'N/A')[:50]}...")
                    except json.JSONDecodeError:
                        continue
        except Exception as e:
            print(f"  ‚ö†Ô∏è Error leyendo {log_file.name}: {e}")

    print(f"üìä Total de referencias a screenshots en logs: {screenshot_refs}")

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas del sistema de screenshots")
    print("=" * 60)

    if not PLAYWRIGHT_AVAILABLE:
        print("‚ùå Playwright no est√° disponible. Instala con: pip install playwright && playwright install")
        return

    try:
        # Pruebas individuales
        test_manual_screenshot()
        print()

        test_automatic_error_screenshot()
        print()

        test_browser_error_logging()
        print()

        test_operation_failure_logging()
        print()

        test_critical_error_with_page()
        print()

        # Verificaci√≥n de resultados
        verificar_screenshots_generados()
        print()

        verificar_logs_con_screenshots()
        print()

        print("=" * 60)
        print("üéâ Todas las pruebas de screenshots completadas!")

        # Mostrar ubicaci√≥n de los archivos
        logger = get_main_logger()
        print(f"\nüìÇ Archivos generados en:")
        print(f"  üìÑ Logs: {logger.log_dir}")
        print(f"  üì∏ Screenshots: {logger.log_dir / 'screenshots'}")

    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()