"""
Endpoint de scraping para subir/crear listas de suscriptores en Acumbamail
"""

import logging
from playwright.sync_api import (
    Page,
    TimeoutError as PWTimeoutError,
    Error as PWError,
    expect,
)
from typing import Optional, Callable, Tuple, Any
from datetime import datetime
import pandas as pd
import os
import tempfile
import uuid
from pathlib import Path


from ..models.listas import (
    ListUploadConfig,
    ListUploadSession,
    ListUploadResult,
    ListUploadColumn,
    ListUploadProgress,
)

if __package__ in (None, ""):
    import sys

    sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
    __package__ = "src"

from ....shared.logging.logger import get_logger
from ....tipo_campo import field_type_label
from ....utils import get_timeouts


class ListUploader:
    """Scraper para subir/crear listas de suscriptores usando web scraping"""

    def __init__(self):
        self.logger = get_logger()

    def safe_interaction(
        self, page: Page, action_description: str, action_callable: Callable[[], Any]
    ) -> Tuple[Optional[Any], bool]:
        """
        Wrapper para interacciones seguras con manejo robusto de errores

        Args:
            page: P√°gina de Playwright
            action_description: Descripci√≥n de la acci√≥n para logging
            action_callable: Funci√≥n callable que ejecuta la acci√≥n

        Returns:
            Tuple (resultado, exito): Resultado de la acci√≥n y booleano de √©xito
        """
        try:
            result = action_callable()
            return result, True
        except PWTimeoutError:
            self.logger.warning(f"‚è±Ô∏è Timeout en: {action_description}")
            return None, False
        except PWError as e:
            self.logger.error(f"‚ùå Error de Playwright en {action_description}: {e}")
            return None, False
        except Exception as e:
            self.logger.error(f"‚ùå Error inesperado en {action_description}: {e}")
            return None, False

    def wait_and_click(
        self, page: Page, selector_description: str, locator, timeout: int = 10000
    ) -> bool:
        """
        Espera a que un elemento est√© visible y hace clic

        Args:
            page: P√°gina de Playwright
            selector_description: Descripci√≥n del selector para logging
            locator: Locator de Playwright
            timeout: Timeout en milisegundos

        Returns:
            True si tuvo √©xito, False si no
        """
        try:
            locator.wait_for(state="visible", timeout=timeout)
            locator.click()
            self.logger.debug(f"‚úÖ Click exitoso: {selector_description}")
            return True
        except PWTimeoutError:
            self.logger.warning(f"‚è±Ô∏è Elemento no visible: {selector_description}")
            return False
        except PWError as e:
            self.logger.error(f"‚ùå Error haciendo click en {selector_description}: {e}")
            return False

    def inicializar_navegacion_lista(self, page: Page) -> bool:
        """
        Navega a la secci√≥n de listas con espera optimizada
        """
        try:
            self.logger.info("Navegando a la secci√≥n de listas")
            # Usar selector moderno para navegar a Listas (primer link en la navegaci√≥n)
            page.get_by_role("link", name="Listas").first.click()
            # Optimizado: solo esperar domcontentloaded en lugar de networkidle
            page.wait_for_load_state("domcontentloaded", timeout=30000)
            return True
        except Exception as e:
            self.logger.error(f"Error navegando a la secci√≥n de listas: {e}")
            return False

    def cargar_columnas_excel(
        self, archivo: str, hoja: str
    ) -> tuple[list[ListUploadColumn], list[str]]:
        """
        Carga columnas del Excel y obtiene valores de ejemplo

        Returns:
            (columnas, segunda_fila): Lista de columnas con metadatos y valores de la segunda fila
        """
        try:
            with pd.ExcelFile(archivo, engine="openpyxl") as xls:
                # Leer como texto y reemplazar NaN por vac√≠o
                df = pd.read_excel(xls, sheet_name=hoja, dtype=str).fillna("")

            columnas_nombres = [str(c) for c in df.columns.tolist()]

            # Primera fila de datos (debajo del header)
            if len(df) > 0:
                segunda_fila = [str(v) for v in df.iloc[0].tolist()]
            else:
                segunda_fila = [""] * len(columnas_nombres)

            # Crear objetos ListUploadColumn con detecci√≥n de tipo
            columnas = []
            for idx, nombre in enumerate(
                columnas_nombres, start=1
            ):  # Start at 1 (Columna 1, 2, 3, etc.)
                valor_ejemplo = (
                    segunda_fila[idx - 1] if idx - 1 < len(segunda_fila) else ""
                )
                tipo_campo = (
                    field_type_label(valor_ejemplo) if valor_ejemplo else "Texto"
                )

                columnas.append(
                    ListUploadColumn(
                        index=idx,
                        name=nombre,
                        field_type=tipo_campo,
                        sample_value=valor_ejemplo,
                    )
                )

            return columnas, segunda_fila

        except Exception as e:
            self.logger.error(f"Error cargando columnas: {e}")
            return [], []

    def generar_archivo_temporal_csv(self, archivo_excel: str, hoja: str) -> str:
        """
        Genera un CSV temporal solo con la hoja indicada

        Returns:
            Ruta del archivo temporal CSV
        """
        try:
            with pd.ExcelFile(archivo_excel, engine="openpyxl") as xls:
                df = pd.read_excel(xls, sheet_name=hoja, dtype=str).fillna("")

            # CSV temporal compatible con Excel (utf-8-sig)
            tmp_path = os.path.join(
                tempfile.gettempdir(), f"lista_{uuid.uuid4().hex}.csv"
            )
            df.to_csv(tmp_path, index=False, encoding="utf-8-sig")

            self.logger.info(f"Archivo temporal CSV generado: {tmp_path}")
            return tmp_path
        except Exception as e:
            self.logger.error(f"Error generando CSV temporal: {e}")
            raise

    def crear_lista(self, page: Page, nombre_lista: str) -> bool:
        """
        Crea una nueva lista en Acumbamail usando selectores modernos

        Returns:
            True si se cre√≥ exitosamente
        """
        try:
            self.logger.info(f"üìù Creando lista: '{nombre_lista}'")

            # Click en "Nueva Lista" - optimizado sin esperas innecesarias
            self.logger.info("   üñ±Ô∏è  Click en 'Nueva Lista'")
            # Eliminado: wait_for_load_state redundantes

            # El enlace no define href, por lo que no expone role="link"; usamos fallback text-based
            btn_nueva_lista = page.locator(
                "a.font-color-white-1", has_text="Nueva Lista"
            )
            btn_nueva_lista.wait_for(state="visible", timeout=10000)  # Reducido de 15s
            btn_nueva_lista.click()

            # Llenar nombre de lista - con auto-waiting
            self.logger.info(f"   ‚úèÔ∏è  Ingresando nombre: '{nombre_lista}'")
            name_input = page.locator("#name")
            name_input.wait_for(state="visible", timeout=10000)  # Reducido de 15s
            name_input.fill("")  # Optimizado: fill en lugar de type lento
            name_input.fill(nombre_lista)  # Eliminado delay=30

            # Click en "Crear" - ya usa role-based locator (validado con BrowserMCP)
            self.logger.info("   üñ±Ô∏è  Click en 'Crear'")
            page.get_by_role("button", name="Crear").click()
            # Auto-waiting de Playwright - no necesita wait_for_load_state

            self.logger.success(f"‚úÖ Lista '{nombre_lista}' creada exitosamente")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Error creando lista: {e}")
            return False

    def subir_archivo(self, page: Page, archivo_csv: str) -> bool:
        """
        Sube el archivo CSV a la lista usando selectores modernos

        Returns:
            True si se subi√≥ exitosamente
        """
        try:
            self.logger.info("üì§ Subiendo archivo CSV")

            # Click en "A√±adir suscriptores" - usando role-based locator optimizado
            self.logger.info("   üñ±Ô∏è  Click en 'A√±adir suscriptores'")
            page.get_by_role("link", name="A√±adir suscriptores").click()
            # Optimizado: solo esperar domcontentloaded en lugar de networkidle
            page.wait_for_load_state("domcontentloaded", timeout=30000)
            # Auto-waiting de Playwright - no necesita wait_for_load_state

            # Seleccionar opci√≥n "Archivo CSV/Excel" - usando label-based locator (validado con BrowserMCP)
            self.logger.info("   ‚òëÔ∏è  Seleccionando opci√≥n 'Archivo CSV/Excel'")
            page.get_by_label("Archivo CSV/Excel").check()

            # Subir archivo - usando file input selector (patr√≥n moderno)
            import os

            tama√±o = os.path.getsize(archivo_csv) / 1024  # KB
            self.logger.info(f"   üìé Subiendo archivo ({tama√±o:.1f} KB)")
            page.set_input_files('input[type="file"]', archivo_csv)

            # Esperar a que se procese el archivo y buscar bot√≥n de continuar
            self.logger.info("   ‚è≥ Esperando procesamiento del archivo...")
            try:
                # Optimizado: buscar bot√≥n con timeout reducido
                btn_continuar = page.locator("a", has_text="A√±adir")
                btn_continuar.wait_for(
                    state="visible", timeout=10000
                )  # Reducido de 15s

                if btn_continuar.is_visible():
                    btn_continuar.click()
                    # Optimizado: usar domcontentloaded en lugar de networkidle
                    page.wait_for_load_state("domcontentloaded", timeout=20000)
                    self.logger.info("   üñ±Ô∏è  Click en 'A√±adir'")
                else:
                    # Intentar con Enter si no se encuentra el bot√≥n
                    page.keyboard.press("Enter")
                    self.logger.info("   ‚å®Ô∏è  Presionando Enter para continuar")
            except PWTimeoutError:
                # Timeout: intentar con Enter como fallback
                page.keyboard.press("Enter")
                self.logger.info("   ‚å®Ô∏è  Presionando Enter para continuar (timeout)")
            except Exception:
                # Error general: intentar con Enter como √∫ltimo recurso
                page.keyboard.press("Enter")
                self.logger.info("   ‚å®Ô∏è  Presionando Enter para continuar (error)")

            # Cerrar popup si aparece - optimizado con timeout reducido
            try:
                btn_close_popup = page.locator("a", has_text="Aceptar")
                btn_close_popup.wait_for(
                    state="visible", timeout=5000
                )  # Reducido de 10s
                btn_close_popup.click(timeout=3000)  # Reducido de 5s
                self.logger.debug("   ‚úì Popup cerrado")
            except PWTimeoutError:
                self.logger.debug("   ‚úì No apareci√≥ popup")

            self.logger.success("‚úÖ Archivo CSV subido exitosamente")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Error subiendo archivo: {e}")
            return False

    def mapear_columnas(
        self,
        page: Page,
        columnas: list[ListUploadColumn],
        progress_callback: Optional[Callable[[ListUploadProgress], None]] = None,
    ) -> int:
        """
        Mapea las columnas del archivo subido a campos personalizados optimizado

        Args:
            page: P√°gina de Playwright
            columnas: Lista de columnas a mapear
            progress_callback: Callback opcional para reportar progreso

        Returns:
            N√∫mero de campos mapeados exitosamente
        """
        campos_mapeados = 0
        total_columnas = len(columnas)
        timeouts = get_timeouts()
        column_mapping_timeout = timeouts.get("column_mapping", 30000)

        try:
            self.logger.info("")
            self.logger.info(f"üîó MAPEO DE COLUMNAS ({total_columnas} columnas)")
            self.logger.info("-" * 70)

            # Validaci√≥n temprana: detectar cu√°ntas columnas realmente existen en la p√°gina
            self.logger.info("üîç Detectando columnas disponibles en la p√°gina...")
            columnas_disponibles = []

            for i in range(
                1, total_columnas + 3
            ):  # Buscar hasta 2 columnas extra por seguridad
                try:
                    contenedor = page.locator("div.col", has_text=f"Columna {i}")
                    if contenedor.count() > 0:
                        columnas_disponibles.append(i)
                        self.logger.debug(f"   ‚úì Columna {i} encontrada")
                    else:
                        if i <= total_columnas:
                            self.logger.warning(f"   ‚ö†Ô∏è Columna {i} no encontrada")
                except Exception:
                    break

            columnas_procesar = min(total_columnas, len(columnas_disponibles))

            # La primera columna (email, index=1) ya est√° mapeada autom√°ticamente
            # Buscar la columna con index=1 para saltarla
            columnas_a_mapear = 0
            indices_a_mapear = []

            for i, columna in enumerate(columnas):
                if columna.index != 1:  # Saltar la columna con index=1 (email)
                    indices_a_mapear.append(i)
                    columnas_a_mapear += 1

            self.logger.info(
                f"üìä Total columnas: {columnas_procesar}, Email (index=1) ya mapeado, Columnas a mapear: {columnas_a_mapear}"
            )
            if columnas_a_mapear == 0:
                self.logger.info("‚úÖ No hay columnas adicionales para mapear")
                return 1  # Retornar 1 por la columna de email ya mapeada

            # Mapear las columnas que no son email (index != 1)
            for loop_idx, columnas_idx in enumerate(indices_a_mapear):
                columna = columnas[columnas_idx]
                try:
                    # Reportar progreso (ajustado para columnas que no son email)
                    if progress_callback:
                        # Calcular el progreso dentro de las columnas a mapear (ignorando email)
                        progreso_actual = loop_idx  # 0-based para las columnas a mapear
                        porcentaje_progreso = (progreso_actual / columnas_a_mapear * 30) if columnas_a_mapear > 0 else 0

                        progreso = ListUploadProgress(
                            stage="mapeando_campos",
                            current_column=progreso_actual + 1,  # 1-based para mostrar al usuario
                            total_columns=columnas_a_mapear,  # Solo columnas a mapear
                            mensaje=f"Mapeando '{columna.name}'",
                            porcentaje=60.0 + porcentaje_progreso,  # 60-90%
                        )
                        progress_callback(progreso)

                    self.logger.info(
                        f"üìã Columna {columna.index}: '{columna.name}' ‚Üí {columna.field_type}"
                    )

                    # Seleccionar contenedor de la columna
                    self.logger.debug(f"   üîç Localizando Columna {columna.index}")
                    contenedor = page.locator(
                        "div.col", has_text=f"Columna {columna.index}"
                    )

                    # Validar que el contenedor exista antes de continuar
                    if contenedor.count() == 0:
                        self.logger.warning(
                            f"   ‚ö†Ô∏è Contenedor de Columna {columna.index} no encontrado"
                        )
                        continue

                    selector = contenedor.locator("select")

                    # Seleccionar "Crear nueva..." con timeout optimizado
                    self.logger.debug("   üñ±Ô∏è  Seleccionando 'Crear nueva...'")
                    selector.select_option(
                        label="Crear nueva...", timeout=column_mapping_timeout
                    )

                    # Esperar a que aparezca el popup con timeout reducido
                    contenedor_popup = page.locator(f"#add-field-popup-{columna.index}")
                    contenedor_popup.wait_for(state="visible", timeout=10000)

                    # Llenar nombre del campo
                    self.logger.debug(f"   ‚úèÔ∏è  Nombre: '{columna.name}'")
                    input_nombre = contenedor_popup.locator(
                        f"#popup-field-name-{columna.index}"
                    )
                    input_nombre.fill(columna.name)

                    # Seleccionar tipo de campo
                    self.logger.debug(f"   üè∑Ô∏è  Tipo: '{columna.field_type}'")
                    selector_tipo = contenedor_popup.locator("select")
                    selector_tipo.select_option(label=columna.field_type, timeout=10000)

                    # Click en "A√±adir"
                    self.logger.debug("   üñ±Ô∏è  Click en 'A√±adir'")
                    btn_aniadir = contenedor_popup.get_by_role("button", name="A√±adir")
                    btn_aniadir.click(timeout=5000)

                    # Esperar a que la p√°gina se estabilice despu√©s de a√±adir el campo
                    page.wait_for_load_state("networkidle", timeout=10000)

                    # Cerrar popup si aparece despu√©s de a√±adir campo
                    try:
                        self.logger.debug("   üîç Buscando popup despu√©s de a√±adir campo...")
                        btn_close_popup = page.locator('a', has_text="Aceptar")
                        btn_close_popup.wait_for(state="visible", timeout=5000)
                        btn_close_popup.click(timeout=3000)
                        self.logger.debug("   ‚úÖ Popup cerrado despu√©s de a√±adir campo")
                    except PWTimeoutError:
                        self.logger.debug("   ‚úì No apareci√≥ popup despu√©s de a√±adir campo")

                    campos_mapeados += 1
                    self.logger.info(f"   ‚úÖ Campo mapeado exitosamente")

                except PWTimeoutError as e:
                    self.logger.warning(
                        f"   ‚ö†Ô∏è Timeout en columna {columna.name}: {str(e)[:100]}..."
                    )
                    continue
                except Exception as e:
                    self.logger.warning(
                        f"   ‚ö†Ô∏è Error en columna {columna.name}: {str(e)[:100]}..."
                    )
                    continue

            self.logger.info("")
            # Agregar 1 por la columna de email que se mapea autom√°ticamente
            total_campos_mapeados = campos_mapeados + 1 if campos_mapeados > 0 else 1
            self.logger.info(
                f"üìä RESULTADO DEL MAPEO: {total_campos_mapeados}/{total_columnas} campos exitosos (incluyendo email)"
            )
            return total_campos_mapeados

        except Exception as e:
            self.logger.error(f"‚ùå Error en mapeo de columnas: {e}")
            return campos_mapeados

    def finalizar_subida(self, page: Page) -> bool:
        """
        Finaliza el proceso de subida haciendo click en "Siguiente" usando selectores modernos

        Returns:
            True si se finaliz√≥ exitosamente
        """
        try:
            self.logger.info("üîÑ Iniciando finalizaci√≥n de subida")
            self.logger.debug(f"URL actual: {page.url}")

            # Paso 1: Localizar el bot√≥n "Siguiente"
            self.logger.info("üìå Paso 1: Localizando bot√≥n 'Siguiente'")
            try:
                btn_siguiente = page.get_by_text("Siguiente", exact=True)
                self.logger.debug("‚úÖ Bot√≥n 'Siguiente' localizado por texto exacto")

                # Verificar que el bot√≥n sea visible antes de hacer clic
                is_visible = btn_siguiente.is_visible(timeout=5000)
                self.logger.debug(f"üîç Bot√≥n visible: {is_visible}")

                if not is_visible:
                    self.logger.warning(
                        "‚ö†Ô∏è Bot√≥n 'Siguiente' no es visible, intentando con otros selectores"
                    )
                    # Intentar con otros selectores
                    btn_siguiente = page.locator("a:visible", has_text="Siguiente")
                    if btn_siguiente.count() == 0:
                        btn_siguiente = page.get_by_role("link", name="Siguiente")
                    self.logger.debug("‚úÖ Bot√≥n encontrado con selector alternativo")

            except Exception as e:
                self.logger.error(
                    f"‚ùå ERROR PASO 1 - No se pudo localizar bot√≥n 'Siguiente': {e}"
                )
                self.logger.error(f"Tipo de error: {type(e).__name__}")
                self.logger.debug(f"URL actual cuando fall√≥: {page.url}")
                return False

            # Paso 2: Hacer clic en el bot√≥n
            self.logger.info("üìå Paso 2: Haciendo clic en bot√≥n 'Siguiente'")
            try:
                btn_siguiente.click()
                self.logger.debug("‚úÖ Click realizado exitosamente")

                # Optimizado: eliminada espera fija de 1s (auto-waiting de Playwright es suficiente)

            except PWTimeoutError as e:
                self.logger.error(f"‚ùå ERROR PASO 2 - Timeout al hacer clic: {e}")
                self.logger.debug(
                    f"Bot√≥n HTML: {btn_siguiente.inner_html() if hasattr(btn_siguiente, 'inner_html') else 'N/A'}"
                )
                return False
            except Exception as e:
                self.logger.error(f"‚ùå ERROR PASO 2 - Error al hacer clic: {e}")
                self.logger.error(f"Tipo de error: {type(e).__name__}")
                return False

            # Paso 3: Esperar la carga de la p√°gina
            self.logger.info("üìå Paso 3: Esperando carga de la p√°gina despu√©s del clic")
            try:
                self.logger.debug("‚è≥ Esperando domcontentloaded...")
                page.wait_for_load_state("domcontentloaded", timeout=20000)
                self.logger.debug("‚úÖ Estado de carga completado")
                self.logger.debug(f"URL despu√©s de la navegaci√≥n: {page.url}")

            except PWTimeoutError as e:
                self.logger.warning(f"‚ö†Ô∏è Timeout esperando carga de p√°gina: {e}")
                self.logger.warning(
                    "‚ö†Ô∏è Continuando de todos modos, la p√°gina podr√≠a haber cargado parcialmente"
                )
            except Exception as e:
                self.logger.error(f"‚ùå ERROR PASO 3 - Error esperando carga: {e}")
                self.logger.error(f"Tipo de error: {type(e).__name__}")
                return False

            # Paso 4: Verificar mensaje de √©xito
            self.logger.info("üìå Paso 4: Verificando mensaje de √©xito")
            try:
                self.logger.debug(
                    "üîç Buscando mensaje: 'Tus suscriptores se han importado con √©xito'"
                )
                expect(
                    page.get_by_text("Tus suscriptores se han importado con √©xito")
                ).to_be_visible(timeout=30000)
                self.logger.info("‚úÖ Mensaje de √©xito principal encontrado")
                self.logger.info("üéâ Suscriptores importados con √©xito")
                return True

            except PWTimeoutError:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ el mensaje principal de √©xito")
                self.logger.info(
                    "üîç Intentando con mensaje alternativo: 'importado con √©xito'"
                )

                try:
                    expect(page.get_by_text("importado con √©xito")).to_be_visible(
                        timeout=10000
                    )
                    self.logger.info("‚úÖ Mensaje de √©xito alternativo encontrado")
                    self.logger.info(
                        "üéâ Suscriptores importados con √©xito (mensaje alternativo)"
                    )
                    return True

                except PWTimeoutError:
                    self.logger.warning("‚ö†Ô∏è No se encontr√≥ ning√∫n mensaje de √©xito")
                    self.logger.warning(
                        "‚ùå No se pudo confirmar la importaci√≥n de suscriptores"
                    )
                    self.logger.debug(f"URL final: {page.url}")
                    self.logger.debug(
                        "üîç Contenido parcial de la p√°gina para debugging..."
                    )
                    try:
                        # Intentar capturar alg√∫n contenido para debugging
                        page_content = page.content()[:500]  # Primeros 500 caracteres
                        self.logger.debug(f"Contenido p√°gina: {page_content}")
                    except Exception:
                        self.logger.debug("No se pudo capturar contenido de p√°gina")
                    return False

                except Exception as e:
                    self.logger.error(
                        f"‚ùå ERROR PASO 4 - Error buscando mensaje alternativo: {e}"
                    )
                    self.logger.error(f"Tipo de error: {type(e).__name__}")
                    return False

            except Exception as e:
                self.logger.error(
                    f"‚ùå ERROR PASO 4 - Error inesperado verificando mensaje: {e}"
                )
                self.logger.error(f"Tipo de error: {type(e).__name__}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå ERROR GENERAL en finalizar_subida: {e}")
            self.logger.error(f"Tipo de error: {type(e).__name__}")
            self.logger.error(f"URL cuando ocurri√≥ el error: {page.url}")

            # Intentar capturar m√°s informaci√≥n de debugging
            try:
                self.logger.debug(
                    "üîç Capturando informaci√≥n adicional para debugging..."
                )
                self.logger.debug(f"T√≠tulo de la p√°gina: {page.title()}")
                self.logger.debug(f"URL actual: {page.url}")
                # Verificar si hay alg√∫n elemento que podr√≠a indicar el estado
                if page.locator("text=error").count() > 0:
                    self.logger.warning("‚ö†Ô∏è Se detect√≥ la palabra 'error' en la p√°gina")
                if page.locator("text=fallo").count() > 0:
                    self.logger.warning("‚ö†Ô∏è Se detect√≥ la palabra 'fallo' en la p√°gina")
            except Exception as debug_e:
                self.logger.debug(
                    f"No se pudo capturar informaci√≥n adicional: {debug_e}"
                )

            return False

    def subir_lista_completa(
        self,
        page: Page,
        config: ListUploadConfig,
        progress_callback: Optional[Callable[[ListUploadProgress], None]] = None,
    ) -> ListUploadResult:
        """
        Ejecuta el proceso completo de subida de lista

        Args:
            page: P√°gina de Playwright
            config: Configuraci√≥n de subida
            progress_callback: Callback opcional para reportar progreso

        Returns:
            ListUploadResult con el resultado del proceso
        """
        # Crear sesi√≥n
        session = ListUploadSession(
            session_id=f"list_upload_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            config=config,
            status="active",
        )

        resultado = ListUploadResult(
            session_info=session,
            success=False,
            list_created=False,
            fields_mapped=0,
            subscribers_uploaded=False,
        )

        archivo_temporal = None

        try:
            # Etapa 1: Navegaci√≥n (0-10%)
            if progress_callback:
                progreso = ListUploadProgress(
                    stage="navegando",
                    current_column=0,
                    total_columns=0,
                    mensaje="Navegando a la secci√≥n de listas",
                    porcentaje=5.0,
                )
                progress_callback(progreso)

            if not self.inicializar_navegacion_lista(page):
                session.add_error("No se pudo navegar a la secci√≥n de listas")
                session.complete_session(success=False)
                resultado.error_message = "Error navegando a la secci√≥n de listas"
                return resultado

            # Etapa 2: Creaci√≥n de lista (10-30%)
            if progress_callback:
                progreso = ListUploadProgress(
                    stage="creando_lista",
                    current_column=0,
                    total_columns=0,
                    mensaje=f"Creando lista '{config.nombre_lista}'",
                    porcentaje=20.0,
                )
                progress_callback(progreso)

            if not self.crear_lista(page, config.nombre_lista):
                session.add_error("No se pudo crear la lista")
                session.complete_session(success=False)
                resultado.error_message = "Error creando la lista"
                return resultado

            resultado.list_created = True

            # Etapa 3: Generaci√≥n y subida de archivo (30-50%)
            if progress_callback:
                progreso = ListUploadProgress(
                    stage="subiendo_archivo",
                    current_column=0,
                    total_columns=0,
                    mensaje="Generando y subiendo archivo CSV",
                    porcentaje=40.0,
                )
                progress_callback(progreso)

            archivo_temporal = self.generar_archivo_temporal_csv(
                config.archivo_path, config.hoja_nombre
            )

            if not self.subir_archivo(page, archivo_temporal):
                session.add_error("No se pudo subir el archivo")
                session.complete_session(success=False)
                resultado.error_message = "Error subiendo el archivo"
                return resultado

            # Etapa 4: Mapeo de columnas (50-90%)
            if progress_callback:
                progreso = ListUploadProgress(
                    stage="mapeando_campos",
                    current_column=0,
                    total_columns=len(config.columnas),
                    mensaje="Iniciando mapeo de campos",
                    porcentaje=60.0,
                )
                progress_callback(progreso)

            campos_mapeados = self.mapear_columnas(
                page, config.columnas, progress_callback
            )
            resultado.fields_mapped = campos_mapeados

            # Etapa 5: Finalizaci√≥n (90-100%)
            if progress_callback:
                progreso = ListUploadProgress(
                    stage="finalizando",
                    current_column=0,
                    total_columns=0,
                    mensaje="Finalizando subida",
                    porcentaje=95.0,
                )
                progress_callback(progreso)

            if not self.finalizar_subida(page):
                session.add_error("No se pudo finalizar la subida")
                session.complete_session(success=False)
                resultado.error_message = "Error finalizando la subida"
                return resultado

            resultado.subscribers_uploaded = True

            # √âxito completo
            session.complete_session(success=True)
            resultado.success = True

            self.logger.info(f"Lista '{config.nombre_lista}' subida exitosamente")

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"Error en subida de lista: {error_msg}")
            session.add_error(error_msg)
            session.complete_session(success=False)
            resultado.error_message = error_msg

        finally:
            # Limpiar archivo temporal
            if archivo_temporal and os.path.exists(archivo_temporal):
                try:
                    os.remove(archivo_temporal)
                    self.logger.debug(f"Archivo temporal eliminado: {archivo_temporal}")
                except Exception as e:
                    self.logger.warning(f"No se pudo eliminar archivo temporal: {e}")

        return resultado
