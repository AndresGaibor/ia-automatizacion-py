from playwright.sync_api import BrowserContext, TimeoutError as PWTimeoutError, Page
from .utils import load_config, storage_state_path, notify

def esperar_carga_pagina(page: Page, timeout: int = 60_000):
    """Espera a que la p√°gina cargue completamente con manejo de timeout."""
    try:
        page.wait_for_load_state("domcontentloaded", timeout=timeout)
        page.wait_for_load_state("networkidle", timeout=timeout)
        # Espera adicional para asegurar que la p√°gina est√© completamente cargada
        page.wait_for_timeout(2000)
    except Exception as e:
        print(f"P√°gina tard√≥ en cargar: {e}. Continuando...")

def aceptar_cookies(page: Page):
	"""Intenta aceptar cookies si el bot√≥n est√° presente."""
	try:
		page.get_by_role("button", name="Aceptar todas").click(timeout=30_000)
	except Exception as e:
		print(f"No se encontr√≥ el bot√≥n de cookies: {e}. Continuando...")

def autenticado(page: Page) -> bool:
	"""Verifica si el usuario ya est√° autenticado."""
	try:
		
		btn_herramientas = page.get_by_role("navigation").get_by_role("link", name="Ir a la herramienta")
		
		esperar_carga_pagina(page)
		
		btn_herramientas.click(timeout=30_000)

		esperar_carga_pagina(page)
		
		return True
	except PWTimeoutError:
		print("No se encontr√≥ el bot√≥n 'Entra', asumiendo que ya est√° autenticado.")
		return False

def login(page: Page, context: BrowserContext):
	"""Realiza login leyendo la configuraci√≥n fresca desde config.yaml."""
	config = load_config()
	username = config.get("user", "")
	password = config.get("password", "")
	url = config.get("url", "")
	url_base = config.get("url_base", "")

	# Validar que las credenciales est√©n configuradas
	if not username or username == "usuario@correo.com":
		notify("Error de Configuraci√≥n", "Error: Usuario no configurado. Edite config.yaml con su email de Acumbamail.", "error")
		raise ValueError("Usuario no configurado en config.yaml")
	
	if not password or password == "clave":
		notify("Error de Configuraci√≥n", "Error: Contrase√±a no configurada. Edite config.yaml con su contrase√±a de Acumbamail.", "error")
		raise ValueError("Contrase√±a no configurada en config.yaml")

	print("üîë Iniciando proceso de login...")
	
	try:
		page.goto(url, timeout=60_000)
	except Exception as e:
		notify("Error de Conexi√≥n", f"Error: No se pudo conectar a Acumbamail: {e}", "error")
		raise

	esperar_carga_pagina(page)

	if f"{url_base}/" != page.url:
		print("‚úÖ Ya est√°s en la p√°gina principal, guardando estado de sesi√≥n...")
		context.storage_state(path=storage_state_path())
		page.wait_for_timeout(5_000)
		return

	aceptar_cookies(page)

	if autenticado(page):
		print("‚úÖ Ya est√°s autenticado.")
		notify("Sesi√≥n", "Ya est√° autenticado en Acumbamail", "info")
	else:
		print("üîê No est√°s autenticado. Procediendo a login...")
		notify("Autenticaci√≥n", "Credenciales requeridas, iniciando login", "info")

		try:
			btn_entrar = page.get_by_role("link", name="Entra")
			btn_entrar.click()
			page.wait_for_load_state("networkidle")

			print("üìù Rellenando formulario de login...")
			page.get_by_role("textbox", name="Correo electr√≥nico").fill(username)
			page.get_by_role("textbox", name="Contrase√±a").fill(password)
			page.locator('label[for="keepme-logged"]').click()

			print("üöÄ Enviando formulario de login...")
			with page.expect_navigation(wait_until="domcontentloaded"):
				page.get_by_role("button", name="Entrar").click()
				esperar_carga_pagina(page)

			print("‚úÖ Login completado exitosamente")
			notify("Autenticaci√≥n", "Login completado exitosamente", "info")
			
		except Exception as e:
			notify("Error de Login", f"Error durante el login: {e}. Verifique sus credenciales.", "error")
			raise

	print("üíæ Guardando estado de sesi√≥n...")
	notify("Sesi√≥n", "Guardando estado de sesi√≥n", "info")
	context.storage_state(path=storage_state_path())

	# Espera adicional para asegurar que la sesi√≥n est√© completamente establecida
	page.wait_for_timeout(3000)
	print("‚úÖ Estado de sesi√≥n guardado correctamente")
