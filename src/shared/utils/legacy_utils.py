"""
Funciones utilitarias compartidas para automatizaci√≥n.
"""

import os
import sys
import re
from playwright.sync_api import BrowserContext

try:
    from ..logging import get_logger
except ImportError:
    try:
        from .logger import get_logger
    except ImportError:
        from src.logger import get_logger

logger = get_logger()

def _early_project_root() -> str:
	if getattr(sys, "frozen", False):
		return os.path.dirname(sys.executable)
	# From src/shared/utils/legacy_utils.py, go up 3 levels to reach project root
	return os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", ".."))

# Forzar ruta de navegadores de Playwright antes de importar la librer√≠a
os.environ.setdefault("PLAYWRIGHT_BROWSERS_PATH", os.path.join(_early_project_root(), "ms-playwright"))
os.makedirs(os.environ["PLAYWRIGHT_BROWSERS_PATH"], exist_ok=True)

from playwright.sync_api import Page
from playwright._impl._errors import Error as PWError
import pandas as pd
import yaml

REAL_UA = (
	"Mozilla/5.0 (Macintosh; Intel Mac OS X 15_6) AppleWebKit/537.36 "
	"(KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
)

def cargar_id_campanias_a_buscar(archivo_busqueda: str) -> list[int]:
	"""
	Carga los t√©rminos de b√∫squeda desde el archivo Excel
	"""
	logger.info("üì• Cargando IDs de campa√±as desde archivo Excel", archivo=archivo_busqueda)
	ids = []
	df = pd.read_excel(archivo_busqueda, engine="openpyxl")
	logger.info("üìä DataFrame cargado", filas_totales=len(df))

	for index, row in df.iterrows():
		buscar = row['Buscar']
		if(buscar == 'x' or buscar == 'X'):
			id_campania = row['ID Campa√±a']
			ids.append(id_campania)
			logger.debug("üîç ID de campa√±a encontrado", index=index, id_campania=id_campania)

	logger.success("‚úÖ IDs de campa√±as cargados exitosamente", total_ids=len(ids))
	return ids

def cargar_campanias_a_buscar(archivo_busqueda: str) -> list[tuple[int, str]]:
	"""
	Carga las campa√±as marcadas desde el archivo Excel
	Retorna lista de tuplas (id, nombre)
	"""
	logger.info("üì• Cargando campa√±as desde archivo Excel", archivo=archivo_busqueda)
	campanias = []
	df = pd.read_excel(archivo_busqueda, engine="openpyxl")
	logger.info("üìä DataFrame cargado", filas_totales=len(df))

	for index, row in df.iterrows():
		buscar = row['Buscar']
		if(buscar == 'x' or buscar == 'X'):
			id_campania = row['ID Campa√±a']
			nombre_campania = row.get('Nombre', f'ID {id_campania}')  # Usar ID como fallback
			campanias.append((id_campania, nombre_campania))
			logger.debug("üîç Campa√±a encontrada", index=index, id_campania=id_campania, nombre=nombre_campania)

	logger.success("‚úÖ Campa√±as cargadas exitosamente", total_campanias=len(campanias))
	return campanias

def cargar_terminos_busqueda(archivo_busqueda: str) -> list[list[str]]:
	"""
	Carga los t√©rminos de b√∫squeda desde el archivo Excel
	"""
	logger.info("üì• Cargando t√©rminos de b√∫squeda desde archivo Excel", archivo=archivo_busqueda)
	terminos = []
	df = pd.read_excel(archivo_busqueda, engine="openpyxl")
	logger.info("üìä DataFrame cargado", filas_totales=len(df))

	for index, row in df.iterrows():
		buscar = row['Buscar']
		if(buscar == 'x' or buscar == 'X'):
			terminos.append([row['Nombre'], row['Listas']])
			logger.debug("üîç T√©rmino de b√∫squeda encontrado", index=index, nombre=row['Nombre'])

	logger.success("‚úÖ T√©rminos de b√∫squeda cargados exitosamente", total_terminos=len(terminos))
	return terminos

def project_root() -> str:
	"""Directorio base de la app:
	- Si est√° congelada (PyInstaller), carpeta del ejecutable.
	- En desarrollo, ra√≠z del proyecto (carpeta que contiene app.py).
	"""
	if getattr(sys, "frozen", False):  # PyInstaller --onefile
		return os.path.dirname(sys.executable)
	# From src/shared/utils/legacy_utils.py, go up 3 levels to reach project root
	return os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", ".."))

def config_path() -> str:
	return os.path.join(project_root(), "config.yaml")

def data_path(name: str) -> str:
	d = os.path.join(project_root(), "data")
	os.makedirs(d, exist_ok=True)
	logger.debug("üìÅ Directorio de datos asegurado", path=d)
	path = os.path.join(d, name)
	logger.debug("üìÑ Ruta de archivo de datos generada", path=path)
	return path

def load_config(defaults: dict | None = None) -> dict:
	"""Carga config.yaml desde el directorio base. Si no existe, lo crea con defaults (si se proveen)."""
	path = config_path()
	if os.path.exists(path):
		logger.info("‚öôÔ∏è Cargando configuraci√≥n", path=path)
		with open(path, "r") as f:
			config = yaml.safe_load(f) or {}
			logger.success("‚úÖ Configuraci√≥n cargada exitosamente", path=path)
			return config
	logger.info("‚öôÔ∏è Archivo de configuraci√≥n no encontrado, creando nuevo archivo", path=path)
	if defaults is None:
		defaults = {}
	logger.debug("üìù Escribiendo configuraci√≥n por defecto", path=path, defaults=defaults)
	with open(path, "w") as f:
		yaml.safe_dump(defaults, f, sort_keys=False)
	logger.success("‚úÖ Configuraci√≥n por defecto creada exitosamente", path=path)
	return defaults

def save_config(cfg: dict):
	logger.info("üíæ Guardando configuraci√≥n", path=config_path(), config_keys=list(cfg.keys()))
	with open(config_path(), "w") as f:
		yaml.safe_dump(cfg, f, sort_keys=False)
	logger.success("‚úÖ Configuraci√≥n guardada exitosamente", path=config_path())

def crear_contexto_navegador(browser, extraccion_oculta: bool = False) -> BrowserContext:
	"""Crea contexto del navegador con configuraci√≥n de sesi√≥n."""
	logger.info("üåê Creando contexto de navegador", extraccion_oculta=extraccion_oculta)

	storage_state = storage_state_path() if os.path.exists(storage_state_path()) else None
	if storage_state:
		logger.debug("üíæ Usando estado de sesi√≥n guardado", path=storage_state)
	else:
		logger.debug("üÜï Creando contexto sin sesi√≥n guardada")

	context = browser.new_context(
		user_agent=REAL_UA,
		viewport={'width': 1366, 'height': 768},
		locale='es-ES',
		timezone_id='Europe/Madrid',
		ignore_https_errors=True,
		storage_state=storage_state,
	)

	# Configurar timeouts b√°sicos
	logger.debug("‚è±Ô∏è Configurando timeouts del contexto: 120s")
	context.set_default_timeout(120000)  # 2 minutos
	context.set_default_navigation_timeout(120000)  # 2 minutos

	logger.success("‚úÖ Contexto de navegador creado exitosamente")
	return context

def storage_state_path() -> str:
	"""Ruta al archivo de estado de sesi√≥n persistente."""
	return data_path("datos_sesion.json")

def ensure_playwright_browsers_path() -> str:
	"""
	Garantiza la ruta (ya establecida arriba) y la devuelve.
	"""
	path = os.environ["PLAYWRIGHT_BROWSERS_PATH"]
	os.makedirs(path, exist_ok=True)
	return path

x_candidates = [2560, 1280]  # 2560 p√≠xeles f√≠sicos; 1280 = 2560/2 (puntos l√≥gicos)


def configurar_navegador(p, extraccion_oculta: bool = False):
	"""
	Configura y lanza el navegador
	"""
	logger.info("üöÄ Configurando navegador Chromium", headless=extraccion_oculta)
	ensure_playwright_browsers_path()

	try:
		logger.debug("üîß Lanzando Chromium con configuraci√≥n anti-detecci√≥n")
		browser = p.chromium.launch(
			headless=extraccion_oculta,
			args=[
				"--disable-blink-features=AutomationControlled",
				"--no-sandbox",
				# "--window-position=2000,0",
					"--window-size=1280,800",
			],
		)
		logger.success("‚úÖ Navegador Chromium lanzado exitosamente")
		return browser
	except PWError as e:
		msg = str(e)
		logger.error("‚ùå Error lanzando navegador", error=msg)
		if "Executable doesn't exist" in msg or "playwright install" in msg:
			logger.warning("‚ö†Ô∏è Chromium no instalado, intentando instalaci√≥n autom√°tica")
			try:
				notify("Playwright", "Descargando Chromium (solo la primera vez)...")
			except Exception:
				pass
			# Ejecutar el CLI sin cerrar el proceso
			logger.info("üì• Instalando Chromium autom√°ticamente...")
			from playwright.__main__ import main as playwright_main
			old_argv = sys.argv[:]
			try:
				for args in (["playwright", "install", "chromium"],
							["playwright", "install", "--force", "chromium"]):
					try:
						logger.debug(f"üîß Intentando instalaci√≥n con: {' '.join(args)}")
						sys.argv = args
						ensure_playwright_browsers_path()
						playwright_main()
						logger.success("‚úÖ Chromium instalado exitosamente")
						break  # instalaci√≥n OK
					except SystemExit as se:
						# Evitar que cierre la app; solo propagar si es error real
						if se.code not in (0, None):
							logger.error(f"‚ùå Error en instalaci√≥n: c√≥digo {se.code}")
							raise
					except Exception as e:
						logger.warning(f"‚ö†Ô∏è Intento de instalaci√≥n fall√≥: {e}")
						# Intentar√° con --force en el siguiente ciclo
						continue
			finally:
				sys.argv = old_argv

			# Reintento de lanzamiento tras instalar
			logger.info("üîÑ Reintentando lanzamiento de Chromium tras instalaci√≥n")
			return p.chromium.launch(
				headless=extraccion_oculta,
				args=[
					"--disable-blink-features=AutomationControlled",
					"--no-sandbox",
				],
			)
		raise

def navegar_a_reportes(page: Page):
	"""
	Navega a la secci√≥n de reportes
	"""
	logger.info("üìä Navegando a secci√≥n de reportes")
	try:
		page.click("a[href*='/reports']")
		logger.debug("‚úÖ Click en enlace de reportes ejecutado")
		page.wait_for_load_state('networkidle')
		logger.success("‚úÖ Navegaci√≥n a reportes completada", url=page.url)
	except Exception as e:
		logger.error("‚ùå Error navegando a reportes", error=str(e))
		raise

def obtener_total_paginas(page: Page) -> int:
	"""
	Obtiene el n√∫mero total de p√°ginas de reportes calculando desde elementos totales.
	Optimiza autom√°ticamente a la m√°xima cantidad de elementos por p√°gina disponible.
	"""
	logger.info("üìä Iniciando c√°lculo de total de p√°ginas con optimizaci√≥n")
	items_por_pagina = 15  # Valor por defecto
	total_elementos = None

	# PASO 1: Obtener el total de elementos ANTES de cambiar el selector
	# Esto evita el error "Execution context was destroyed" que ocurre despu√©s de la navegaci√≥n
	logger.debug("üîç PASO 1: Obteniendo total de elementos")
	try:
		# Buscar el total de elementos en el texto "de X elementos"
		elementos_info = page.locator("text=/de \\d+ elementos/i")

		if elementos_info.count() > 0:
			total_elementos_texto = elementos_info.first.inner_text(timeout=5000)
			logger.debug("üìã Texto de elementos encontrado", texto=total_elementos_texto)

			# Extraer el n√∫mero del texto (e.g., "de 396 elementos")
			match = re.search(r'de\s+(\d+)\s+elementos', total_elementos_texto, re.IGNORECASE)
			if match:
				total_elementos = int(match.group(1))
				logger.info(f"‚úÖ Total de elementos extra√≠do: {total_elementos}")
			else:
				# Fallback: extraer cualquier n√∫mero
				numeros = re.findall(r"\d+", total_elementos_texto)
				if numeros:
					total_elementos = int(numeros[-1])
					logger.warning(f"‚ö†Ô∏è Total extra√≠do con fallback regex: {total_elementos}")

	except Exception as e:
		logger.error("‚ùå Error obteniendo total de elementos", error=str(e))
		print(f"‚ö†Ô∏è Error obteniendo total de elementos: {e}")

	# PASO 2: Optimizar items por p√°gina (esto causa navegaci√≥n/recarga)
	logger.debug("üîç PASO 2: Optimizando items por p√°gina")
	try:
		print("üîç Optimizando elementos por p√°gina...")

		# Buscar el selector de items por p√°gina
		items_selector = page.locator('select').filter(has=page.locator('option', has_text="15"))
		if items_selector.count() > 0:
			logger.debug("‚úÖ Selector de items encontrado")
			# Obtener la √∫ltima opci√≥n (m√°ximo disponible)
			ultimo_option = items_selector.locator('option').last
			value_ultimo_option = ultimo_option.get_attribute('value')
			text_ultimo_option = ultimo_option.inner_text()

			logger.debug(f"üéØ Seleccionando opci√≥n m√°xima: {text_ultimo_option} items")
			# Seleccionar la √∫ltima opci√≥n
			items_selector.select_option(value=value_ultimo_option)

			# Esperar a que la p√°gina se recargue completamente con los nuevos items
			# Usar networkidle para asegurar que la p√°gina est√° completamente cargada
			logger.debug("‚è≥ Esperando recarga de p√°gina (networkidle)...")
			page.wait_for_load_state("networkidle", timeout=30000)
			# Espera adicional para que la tabla se renderice completamente
			page.wait_for_timeout(2000)

			print(f"‚úÖ Optimizado a {text_ultimo_option} elementos por p√°gina")
			items_por_pagina = int(text_ultimo_option)
			logger.success(f"‚úÖ Optimizaci√≥n completada: {items_por_pagina} elementos por p√°gina")

	except Exception as e:
		logger.error("‚ùå Error optimizando items por p√°gina", error=str(e))
		print(f"‚ö†Ô∏è Error optimizando items por p√°gina: {e}")

	# PASO 3: Calcular p√°ginas usando el total de elementos obtenido antes de la navegaci√≥n
	logger.debug("üîç PASO 3: Calculando total de p√°ginas")
	if total_elementos is not None:
		# Calcular total de p√°ginas
		total_paginas = (total_elementos + items_por_pagina - 1) // items_por_pagina
		print(f"üìä {total_elementos} elementos total, {items_por_pagina} por p√°gina = {total_paginas} p√°ginas")
		logger.success(f"‚úÖ Total de p√°ginas calculado: {total_paginas}",
		              total_elementos=total_elementos,
		              items_por_pagina=items_por_pagina)
		return max(1, total_paginas)

	# Fallback: buscar navegaci√≥n tradicional
	logger.debug("üîÑ Intentando m√©todo fallback: navegaci√≥n tradicional")
	try:
		navegacion = page.locator('ul').filter(has=page.locator('li').locator('a', has_text="1")).last
		if navegacion.count() > 0:
			ultimo_elemento = navegacion.locator('li').last
			texto = ultimo_elemento.inner_text(timeout=5000)
			if texto.isdigit():
				print(f"üìÑ P√°ginas encontradas por navegaci√≥n: {texto}")
				logger.info(f"‚úÖ P√°ginas encontradas por navegaci√≥n fallback: {texto}")
				return int(texto)
	except Exception as e:
		logger.debug("‚ö†Ô∏è M√©todo fallback tambi√©n fall√≥", error=str(e))
		pass

	logger.warning("‚ö†Ô∏è No se pudo determinar total de p√°ginas, usando 1 por defecto")
	print("‚ö†Ô∏è No se pudo determinar total de p√°ginas, usando 1")
	return 1

def obtener_total_paginas_rapido(page: Page) -> int:
	"""
	Versi√≥n r√°pida para obtener total de p√°ginas sin optimizar items por p√°gina.
	√ötil cuando sabemos que hay pocos elementos o queremos m√°xima velocidad.
	"""
	logger.debug("‚ö° Obteniendo total de p√°ginas (modo r√°pido, sin optimizaci√≥n)")
	try:
		# Solo buscar navegaci√≥n, sin intentar optimizar items por p√°gina
		navegacion = page.locator('ul').filter(has=page.locator('li').locator('a', has_text="1")).last

		if navegacion.count() > 0:
			ultimo_elemento = navegacion.locator('li').last
			texto = ultimo_elemento.inner_text(timeout=3000)

			if texto.isdigit():
				logger.info(f"‚úÖ Total de p√°ginas encontrado (r√°pido): {texto}")
				return int(texto)

		logger.debug("‚ö†Ô∏è No se encontr√≥ navegaci√≥n, retornando 1")
		return 1
	except Exception as e:
		logger.warning("‚ö†Ô∏è Error en obtener_total_paginas_rapido, retornando 1", error=str(e))
		return 1

def navegar_siguiente_pagina(page: Page, pagina_actual: int) -> bool:
	"""
	Navega a la siguiente p√°gina si existe (optimizado)
	"""
	siguiente_pagina = pagina_actual + 1
	logger.debug(f"‚û°Ô∏è Intentando navegar a p√°gina {siguiente_pagina}", pagina_actual=pagina_actual)

	try:
		# Buscar navegaci√≥n con timeout reducido
		navegacion = page.locator('ul').filter(
			has=page.locator('li').locator('a', has_text=f"{siguiente_pagina}")
		).last

		enlace = navegacion.locator('a', has_text=f"{siguiente_pagina}").first

		if enlace.count() > 0:
			logger.debug(f"‚úÖ Enlace a p√°gina {siguiente_pagina} encontrado")
			# Timeout m√°s corto para el enlace
			enlace.wait_for(timeout=8000)
			enlace.click()
			logger.debug("‚è≥ Esperando carga de p√°gina (domcontentloaded)...")
			# Usar domcontentloaded para mayor velocidad
			page.wait_for_load_state("domcontentloaded", timeout=15000)
			# Peque√±a espera para asegurar que la tabla se actualiza
			page.wait_for_timeout(1500)
			print(f"‚û°Ô∏è Navegando a p√°gina {siguiente_pagina}...")
			logger.success(f"‚úÖ Navegaci√≥n a p√°gina {siguiente_pagina} completada", url=page.url)
			return True
		else:
			logger.debug(f"‚ö†Ô∏è No se encontr√≥ enlace a p√°gina {siguiente_pagina}")
			return False
	except Exception as e:
		print(f"‚ùå Error navegando a p√°gina {siguiente_pagina}: {e}")
		logger.error(f"‚ùå Error navegando a p√°gina {siguiente_pagina}", error=str(e))
		return False

def notify(title: str, message: str, level: str = "info") -> bool:
	"""
	Muestra una notificaci√≥n segura:
	- Si hay una UI Tk activa (o se puede crear en el hilo principal), usa messagebox.
	- Si no, imprime en consola.
	- Tambi√©n registra en el logger para seguimiento.

	Retorna True si se mostr√≥ con Tk, False si se hizo fallback a print.
	"""
	try:
		import tkinter as tk  # type: ignore
		from tkinter import messagebox  # type: ignore
		import threading

		root = getattr(tk, "_default_root", None)
		created = False

		if root is None:
			# Solo crear una ra√≠z si estamos en el hilo principal para evitar errores.
			if threading.current_thread() is not threading.main_thread():
				raise RuntimeError("No hay Tk root y no estamos en el hilo principal")
			root = tk.Tk()
			root.withdraw()
			created = True

		if level == "error":
			messagebox.showerror(title, message)
		elif level == "warning":
			messagebox.showwarning(title, message)
		else:
			messagebox.showinfo(title, message)

		if created:
			# Cerrar la ra√≠z temporal para no dejar ventanas ocultas vivas.
			try:
				root.destroy()
			except Exception:
				pass
		logger.info("üîî Notificaci√≥n mostrada", title=title, message=message, level=level, ui_used=True)
		return True
	except Exception:
		# Entornos headless o sin Tk: fallback a consola y logger
		print(f"{title}: {message}")
		logger.info("üîî Notificaci√≥n mostrada", title=title, message=message, level=level, ui_used=False)
		return False
	

def ejecutando_desde_terminal():
	# Si stdout o stdin est√°n asociados a un TTY -> muy probablemente desde terminal
	if sys.stdout.isatty() or sys.stdin.isatty():
		return True
	
	# Variables de entorno que suelen existir cuando ejecutas desde terminal/terminal emulator
	if os.getenv("TERM") or os.getenv("TERM_PROGRAM") or os.getenv("SSH_TTY"):
		return True

	# En Linux/X11/Wayland, DISPLAY o WAYLAND_DISPLAY suelen indicar entorno gr√°fico,
	# pero no garantizan que no haya terminal (puedes tener terminal dentro del X session).
	# Aqu√≠ asumimos: si no es TTY y hay DISPLAY -> probablemente lanzado desde GUI (doble clic).
	if os.getenv("DISPLAY") or os.getenv("WAYLAND_DISPLAY"):
		return False

	# Fallback: si no est√° claro, devolvemos None
	return None

def get_timeouts() -> dict:
	"""
	Retorna timeouts configurables para las operaciones de Playwright
	"""
	config = load_config()
	timeouts = config.get("timeouts", {})
	
	return {
		"default": timeouts.get("default", 30000),        # 30 segundos
		"navigation": timeouts.get("navigation", 60000),  # 60 segundos  
		"element": timeouts.get("element", 15000),        # 15 segundos
		"upload": timeouts.get("upload", 120000),         # 2 minutos
	}

def safe_goto(page: Page, url: str, timeout: int = 60000) -> bool:
	"""
	Navega a una URL de forma segura con manejo de errores
	"""
	logger.debug("üåê Navegando de forma segura", url=url, timeout=timeout)
	try:
		page.goto(url, timeout=timeout, wait_until="networkidle")
		logger.success("‚úÖ Navegaci√≥n segura completada", url=url)
		return True
	except Exception as e:
		print(f"Error navegando a {url}: {e}")
		logger.error("‚ùå Error en navegaci√≥n segura", url=url, error=str(e))
		return False

def click_element(element):
	"""
	Hace clic en un elemento de forma segura con manejo de errores
	"""
	logger.debug("üñ±Ô∏è Haciendo clic en elemento de forma segura")
	try:
		element.click()
		logger.debug("‚úÖ Click ejecutado exitosamente")
		return True
	except Exception as e:
		print(f"Error haciendo clic en elemento: {e}")
		logger.error("‚ùå Error haciendo clic en elemento", error=str(e))
		return False

def is_on_login_page(page: Page) -> bool:
	"""
	Verifica si la p√°gina actual es la p√°gina de login.

	Args:
		page: P√°gina de Playwright a verificar

	Returns:
		True si est√° en la p√°gina de login, False en caso contrario
	"""
	try:
		current_url = page.url
		is_login = '/login/' in current_url or '/login' in current_url.lower()

		if is_login:
			logger.warning("‚ö†Ô∏è Redirecci√≥n a login detectada", url=current_url)

		return is_login
	except Exception as e:
		logger.error("‚ùå Error verificando p√°gina de login", error=str(e))
		return False

def validate_session(page: Page) -> bool:
	"""
	Valida si la sesi√≥n actual sigue activa navegando a una p√°gina de prueba.

	Args:
		page: P√°gina de Playwright para validar

	Returns:
		True si la sesi√≥n es v√°lida, False si expir√≥
	"""
	try:
		logger.info("üîç Validando sesi√≥n activa...")

		# Guardar URL actual para regresar despu√©s
		current_url = page.url

		# Navegar a p√°gina de prueba (reportes)
		test_url = "https://acumbamail.com/report/campaign/"
		page.goto(test_url, wait_until="networkidle", timeout=30000)

		# Verificar si fue redirigido a login
		if is_on_login_page(page):
			logger.warning("‚ö†Ô∏è Sesi√≥n expirada - se requiere re-autenticaci√≥n")
			return False

		logger.success("‚úÖ Sesi√≥n v√°lida")

		# Intentar regresar a la URL original si es diferente
		if current_url and current_url != test_url:
			try:
				page.goto(current_url, wait_until="networkidle", timeout=30000)
			except Exception:
				pass  # No es cr√≠tico si falla

		return True

	except Exception as e:
		logger.error("‚ùå Error validando sesi√≥n", error=str(e))
		return False