23376:// node_modules/statuses/codes.json
23378:  "node_modules/statuses/codes.json"(exports, module2) {
23447:// node_modules/statuses/index.js
23449:  "node_modules/statuses/index.js"(exports, module2) {
52877:// node_modules/yaml/dist/schema/tags.js
52879:  "node_modules/yaml/dist/schema/tags.js"(exports) {
57730:// docs/openapi.yaml
57731:var openapi_default = 'components:\n  schemas:\n    Error:\n      properties:\n        errorCode:\n          description: |\n            A 5-digit error code uniquely identifying this particular type of error.\n          example: 40149\n          type: "number"\n        message:\n          description: "Message describing the error."\n          example: "A brief description of the error."\n          type: "string"\n      type: "object"\n    NoteJson:\n      properties:\n        content:\n          type: "string"\n        frontmatter:\n          type: "object"\n        path:\n          type: "string"\n        stat:\n          properties:\n            ctime:\n              type: "number"\n            mtime:\n              type: "number"\n            size:\n              type: "number"\n          required:\n            - "ctime"\n            - "mtime"\n            - "size"\n          type: "object"\n        tags:\n          items:\n            type: "string"\n          type: "array"\n      required:\n        - "tags"\n        - "frontmatter"\n        - "stat"\n        - "path"\n        - "content"\n      type: "object"\n  securitySchemes:\n    apiKeyAuth:\n      description: |\n        Find your API Key in your Obsidian settings\n        in the "Local REST API" section under "Plugins".\n      scheme: "bearer"\n      type: "http"\ninfo:\n  description: |\n    You can use this interface for trying out your Local REST API in Obsidian.\n    \n    Before trying the below tools, you will want to make sure you press the "Authorize" button below and provide the API Key you are shown when you open the "Local REST API" section of your Obsidian settings.  All requests to the API require a valid API Key; so you won\'t get very far without doing that.\n    \n    When using this tool you may see browser security warnings due to your browser not trusting the self-signed certificate the plugin will generate on its first run.  If you do, you can make those errors disappear by adding the certificate as a "Trusted Certificate" in your browser or operating system\'s settings.\n  title: "Local REST API for Obsidian"\n  version: "1.0"\nopenapi: "3.0.2"\npaths:\n  /:\n    get:\n      description: |\n        Returns basic details about the server as well as your authentication status.\n        \n        This is the only API request that does *not* require authentication.\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                properties:\n                  authenticated:\n                    description: "Is your current request authenticated?"\n                    type: "boolean"\n                  ok:\n                    description: "\'OK\'"\n                    type: "string"\n                  service:\n                    description: "\'Obsidian Local REST API\'"\n                    type: "string"\n                  versions:\n                    properties:\n                      obsidian:\n                        description: "Obsidian plugin API version"\n                        type: "string"\n                      self:\n                        description: "Plugin version."\n                        type: "string"\n                    type: "object"\n                type: "object"\n          description: "Success"\n      summary: |\n        Returns basic details about the server.\n      tags:\n        - "System"\n  /active/:\n    delete:\n      parameters: []\n      responses:\n        "204":\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "File does not exist."\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Deletes the currently-active file in Obsidian.\n      tags:\n        - "Active File"\n    get:\n      description: |\n        Returns the content of the currently active file in Obsidian.\n        \n        If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.\n      parameters: []\n      responses:\n        "200":\n          content:\n            "application/vnd.olrapi.note+json":\n              schema:\n                "$ref": "#/components/schemas/NoteJson"\n            text/markdown:\n              schema:\n                example: |\n                  # This is my document\n                  \n                  something else here\n                type: "string"\n          description: "Success"\n        "404":\n          description: "File does not exist"\n      summary: |\n        Return the content of the active file open in Obsidian.\n      tags:\n        - "Active File"\n    patch:\n      description: |\n        Inserts content into the currently-open note relative to a heading, block refeerence, or frontmatter field within that document.\n        \n        Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.\n        \n        Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.\n        \n        # Examples\n        \n        All of the below examples assume you have a document that looks like\n        this:\n        \n        ```markdown\n        ---\n        alpha: 1\n        beta: test\n        delta:\n        zeta: 1\n        yotta: 1\n        gamma:\n        - one\n        - two\n        ---\n        \n        # Heading 1\n        \n        This is the content for heading one\n        \n        Also references some [[#^484ef2]]\n        \n        ## Subheading 1:1\n        Content for Subheading 1:1\n        \n        ### Subsubheading 1:1:1\n        \n        ### Subsubheading 1:1:2\n        \n        Testing how block references work for a table.[[#^2c7cfa]]\n        Some content for Subsubheading 1:1:2\n        \n        More random text.\n        \n        ^2d9b4a\n        \n        ## Subheading 1:2\n        \n        Content for Subheading 1:2.\n        \n        some content with a block reference ^484ef2\n        \n        ## Subheading 1:3\n        | City         | Population |\n        | ------------ | ---------- |\n        | Seattle, WA  | 8          |\n        | Portland, OR | 4          |\n        \n        ^2c7cfa\n        ```\n        \n        ## Append Content Below a Heading\n        \n        If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",\n        you could send a request with the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `heading`\n        - `Target`: `Heading 1::Subheading 1:1:1`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Append Content to a Block Reference\n        \n        If you wanted to append the content "Hello" below the block referenced by\n        "2d9b4a" above ("More random text."), you could send the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `block`\n        - `Target`: `2d9b4a`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Add a Row to a Table Referenced by a Block Reference\n        \n        If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above\n        referenced by the block reference `2c7cfa`, you could send the following\n        headers:\n        \n        - `Operation`: `append`\n        - `TargetType`: `block`\n        - `Target`: `2c7cfa`\n        - `Content-Type`: `application/json`\n        - with the request body: `[["Chicago, IL", "16"]]`\n        \n        The use of a `Content-Type` of `application/json` allows the API\n        to infer that member of your array represents rows and columns of your\n        to append to the referenced table.  You can of course just use a\n        `Content-Type` of `text/markdown`, but in such a case you\'ll have to\n        format your table row manually instead of letting the library figure\n        it out for you.\n        \n        You also have the option of using `prepend` (in which case, your new\n        row would be the first -- right below the table heading) or `replace` (in which\n        case all rows except the table heading would be replaced by the new row(s)\n        you supplied).\n        \n        ## Setting a Frontmatter Field\n        \n        If you wanted to set the frontmatter field `alpha` to `2`, you could\n        send the following headers:\n        \n        - `Operation`: `replace`\n        - `TargetType`: `frontmatter`\n        - `Target`: `beep`\n        - with the request body `2`\n        \n        If you\'re setting a frontmatter field that might not already exist\n        you may want to use the `Create-Target-If-Missing` header so the\n        new frontmatter field is created and set to your specified value\n        if it doesn\'t already exist.\n        \n        You may find using a `Content-Type` of `application/json` to be\n        particularly useful in the case of frontmatter since frontmatter\n        fields\' values are JSON data, and the API can be smarter about\n        interpreting yoru `prepend` or `append` requests if you specify\n        your data as JSON (particularly when appending, for example,\n        list items).\n      parameters:\n        - description: "Patch operation to perform"\n          in: "header"\n          name: "Operation"\n          required: true\n          schema:\n            enum:\n              - "append"\n              - "prepend"\n              - "replace"\n            type: "string"\n        - description: "Type of target to patch"\n          in: "header"\n          name: "Target-Type"\n          required: true\n          schema:\n            enum:\n              - "heading"\n              - "block"\n              - "frontmatter"\n            type: "string"\n        - description: "Delimiter to use for nested targets (i.e. Headings)"\n          in: "header"\n          name: "Target-Delimiter"\n          required: false\n          schema:\n            default: "::"\n            type: "string"\n        - description: |\n            Target to patch; this value can be URL-Encoded and *must*\n            be URL-Encoded if it includes non-ASCII characters.\n          in: "header"\n          name: "Target"\n          required: true\n          schema:\n            type: "string"\n        - description: "Trim whitespace from Target before applying patch?"\n          in: "header"\n          name: "Trim-Target-Whitespace"\n          required: false\n          schema:\n            default: "false"\n            enum:\n              - "true"\n              - "false"\n            type: "string"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example: "[\'one\', \'two\']"\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to insert."\n        required: true\n      responses:\n        "200":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request; see response message for details."\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Does not exist"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Partially update content in the currently open note.\n      tags:\n        - "Active File"\n    post:\n      description: |\n        Appends content to the end of the currently-open note.\n        \n        If you would like to insert text relative to a particular heading instead of appending to the end of the file, see \'patch\'.\n      parameters: []\n      requestBody:\n        content:\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to append."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Append content to the active file open in Obsidian.\n      tags:\n        - "Active File"\n    put:\n      parameters: []\n      requestBody:\n        content:\n          "*/*":\n            schema:\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content of the file you would like to upload."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable \'Content-Type\' header; if you are uploading a note, \'text/markdown\' is likely the right choice.\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Update the content of the active file open in Obsidian.\n      tags:\n        - "Active File"\n  /commands/:\n    get:\n      responses:\n        "200":\n          content:\n            application/json:\n              example:\n                commands:\n                  - id: "global-search:open"\n                    name: "Search: Search in all files"\n                  - id: "graph:open"\n                    name: "Graph view: Open graph view"\n              schema:\n                properties:\n                  commands:\n                    items:\n                      properties:\n                        id:\n                          type: "string"\n                        name:\n                          type: "string"\n                      type: "object"\n                    type: "array"\n                type: "object"\n          description: "A list of available commands."\n      summary: |\n        Get a list of available commands.\n      tags:\n        - "Commands"\n  "/commands/{commandId}/":\n    post:\n      parameters:\n        - description: "The id of the command to execute"\n          in: "path"\n          name: "commandId"\n          required: true\n          schema:\n            type: "string"\n      responses:\n        "204":\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "The command you specified does not exist."\n      summary: |\n        Execute a command.\n      tags:\n        - "Commands"\n  /obsidian-local-rest-api.crt:\n    get:\n      responses:\n        "200":\n          description: "Success"\n      summary: |\n        Returns the certificate in use by this API.\n      tags:\n        - "System"\n  "/open/{filename}":\n    post:\n      description: |\n        Note: Obsidian will create a new document at the path you have\n        specified if such a document did not already exist.\n      parameters:\n        - description: |\n            Path to the file to return (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n        - description: "Open this as a new leaf?"\n          in: "query"\n          name: "newLeaf"\n          required: false\n          schema:\n            type: "boolean"\n      responses:\n        "200":\n          description: "Success"\n      summary: |\n        Open the specified document in the Obsidian user interface.\n      tags:\n        - "Open"\n  /openapi.yaml:\n    get:\n      responses:\n        "200":\n          description: "Success"\n      summary: |\n        Returns OpenAPI YAML document describing the capabilities of this API.\n      tags:\n        - "System"\n  "/periodic/{period}/":\n    delete:\n      parameters:\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      responses:\n        "204":\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "File does not exist."\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Delete the current periodic note for the specified period.\n      tags:\n        - "Periodic Notes"\n    get:\n      parameters:\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      responses:\n        "200":\n          content:\n            "application/vnd.olrapi.note+json":\n              schema:\n                "$ref": "#/components/schemas/NoteJson"\n            text/markdown:\n              schema:\n                example: |\n                  # This is my document\n                  \n                  something else here\n                type: "string"\n          description: "Success"\n        "404":\n          description: "File does not exist"\n      summary: |\n        Get current periodic note for the specified period.\n      tags:\n        - "Periodic Notes"\n    patch:\n      description: |\n        Inserts content into the current periodic note for the specified period relative to a heading, block refeerence, or frontmatter field within that document.\n        \n        Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.\n        \n        Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.\n        \n        # Examples\n        \n        All of the below examples assume you have a document that looks like\n        this:\n        \n        ```markdown\n        ---\n        alpha: 1\n        beta: test\n        delta:\n        zeta: 1\n        yotta: 1\n        gamma:\n        - one\n        - two\n        ---\n        \n        # Heading 1\n        \n        This is the content for heading one\n        \n        Also references some [[#^484ef2]]\n        \n        ## Subheading 1:1\n        Content for Subheading 1:1\n        \n        ### Subsubheading 1:1:1\n        \n        ### Subsubheading 1:1:2\n        \n        Testing how block references work for a table.[[#^2c7cfa]]\n        Some content for Subsubheading 1:1:2\n        \n        More random text.\n        \n        ^2d9b4a\n        \n        ## Subheading 1:2\n        \n        Content for Subheading 1:2.\n        \n        some content with a block reference ^484ef2\n        \n        ## Subheading 1:3\n        | City         | Population |\n        | ------------ | ---------- |\n        | Seattle, WA  | 8          |\n        | Portland, OR | 4          |\n        \n        ^2c7cfa\n        ```\n        \n        ## Append Content Below a Heading\n        \n        If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",\n        you could send a request with the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `heading`\n        - `Target`: `Heading 1::Subheading 1:1:1`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Append Content to a Block Reference\n        \n        If you wanted to append the content "Hello" below the block referenced by\n        "2d9b4a" above ("More random text."), you could send the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `block`\n        - `Target`: `2d9b4a`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Add a Row to a Table Referenced by a Block Reference\n        \n        If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above\n        referenced by the block reference `2c7cfa`, you could send the following\n        headers:\n        \n        - `Operation`: `append`\n        - `TargetType`: `block`\n        - `Target`: `2c7cfa`\n        - `Content-Type`: `application/json`\n        - with the request body: `[["Chicago, IL", "16"]]`\n        \n        The use of a `Content-Type` of `application/json` allows the API\n        to infer that member of your array represents rows and columns of your\n        to append to the referenced table.  You can of course just use a\n        `Content-Type` of `text/markdown`, but in such a case you\'ll have to\n        format your table row manually instead of letting the library figure\n        it out for you.\n        \n        You also have the option of using `prepend` (in which case, your new\n        row would be the first -- right below the table heading) or `replace` (in which\n        case all rows except the table heading would be replaced by the new row(s)\n        you supplied).\n        \n        ## Setting a Frontmatter Field\n        \n        If you wanted to set the frontmatter field `alpha` to `2`, you could\n        send the following headers:\n        \n        - `Operation`: `replace`\n        - `TargetType`: `frontmatter`\n        - `Target`: `beep`\n        - with the request body `2`\n        \n        If you\'re setting a frontmatter field that might not already exist\n        you may want to use the `Create-Target-If-Missing` header so the\n        new frontmatter field is created and set to your specified value\n        if it doesn\'t already exist.\n        \n        You may find using a `Content-Type` of `application/json` to be\n        particularly useful in the case of frontmatter since frontmatter\n        fields\' values are JSON data, and the API can be smarter about\n        interpreting yoru `prepend` or `append` requests if you specify\n        your data as JSON (particularly when appending, for example,\n        list items).\n      parameters:\n        - description: "Patch operation to perform"\n          in: "header"\n          name: "Operation"\n          required: true\n          schema:\n            enum:\n              - "append"\n              - "prepend"\n              - "replace"\n            type: "string"\n        - description: "Type of target to patch"\n          in: "header"\n          name: "Target-Type"\n          required: true\n          schema:\n            enum:\n              - "heading"\n              - "block"\n              - "frontmatter"\n            type: "string"\n        - description: "Delimiter to use for nested targets (i.e. Headings)"\n          in: "header"\n          name: "Target-Delimiter"\n          required: false\n          schema:\n            default: "::"\n            type: "string"\n        - description: |\n            Target to patch; this value can be URL-Encoded and *must*\n            be URL-Encoded if it includes non-ASCII characters.\n          in: "header"\n          name: "Target"\n          required: true\n          schema:\n            type: "string"\n        - description: "Trim whitespace from Target before applying patch?"\n          in: "header"\n          name: "Trim-Target-Whitespace"\n          required: false\n          schema:\n            default: "false"\n            enum:\n              - "true"\n              - "false"\n            type: "string"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example: "[\'one\', \'two\']"\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to insert."\n        required: true\n      responses:\n        "200":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request; see response message for details."\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Does not exist"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Partially update content in the current periodic note for the specified period.\n      tags:\n        - "Periodic Notes"\n    post:\n      description: |\n        Note that this will create the relevant periodic note if necessary.\n      parameters:\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to append."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Append content to the current periodic note for the specified period.\n      tags:\n        - "Periodic Notes"\n    put:\n      parameters:\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          "*/*":\n            schema:\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content of the file you would like to upload."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable \'Content-Type\' header; if you are uploading a note, \'text/markdown\' is likely the right choice.\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Update the content of the current periodic note for the specified period.\n      tags:\n        - "Periodic Notes"\n  "/periodic/{period}/{year}/{month}/{day}/":\n    delete:\n      description: |\n        Deletes the periodic note for the specified period.\n      parameters:\n        - description: "The year of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "year"\n          required: true\n          schema:\n            type: "number"\n        - description: "The month (1-12) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "month"\n          required: true\n          schema:\n            type: "number"\n        - description: "The day (1-31) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "day"\n          required: true\n          schema:\n            type: "number"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      responses:\n        "204":\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "File does not exist."\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Delete the periodic note for the specified period and date.\n      tags:\n        - "Periodic Notes"\n    get:\n      parameters:\n        - description: "The year of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "year"\n          required: true\n          schema:\n            type: "number"\n        - description: "The month (1-12) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "month"\n          required: true\n          schema:\n            type: "number"\n        - description: "The day (1-31) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "day"\n          required: true\n          schema:\n            type: "number"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      responses:\n        "200":\n          content:\n            "application/vnd.olrapi.note+json":\n              schema:\n                "$ref": "#/components/schemas/NoteJson"\n            text/markdown:\n              schema:\n                example: |\n                  # This is my document\n                  \n                  something else here\n                type: "string"\n          description: "Success"\n        "404":\n          description: "File does not exist"\n      summary: |\n        Get the periodic note for the specified period and date.\n      tags:\n        - "Periodic Notes"\n    patch:\n      description: |\n        Inserts content into a periodic note relative to a heading, block refeerence, or frontmatter field within that document.\n        \n        Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.\n        \n        Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.\n        \n        # Examples\n        \n        All of the below examples assume you have a document that looks like\n        this:\n        \n        ```markdown\n        ---\n        alpha: 1\n        beta: test\n        delta:\n        zeta: 1\n        yotta: 1\n        gamma:\n        - one\n        - two\n        ---\n        \n        # Heading 1\n        \n        This is the content for heading one\n        \n        Also references some [[#^484ef2]]\n        \n        ## Subheading 1:1\n        Content for Subheading 1:1\n        \n        ### Subsubheading 1:1:1\n        \n        ### Subsubheading 1:1:2\n        \n        Testing how block references work for a table.[[#^2c7cfa]]\n        Some content for Subsubheading 1:1:2\n        \n        More random text.\n        \n        ^2d9b4a\n        \n        ## Subheading 1:2\n        \n        Content for Subheading 1:2.\n        \n        some content with a block reference ^484ef2\n        \n        ## Subheading 1:3\n        | City         | Population |\n        | ------------ | ---------- |\n        | Seattle, WA  | 8          |\n        | Portland, OR | 4          |\n        \n        ^2c7cfa\n        ```\n        \n        ## Append Content Below a Heading\n        \n        If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",\n        you could send a request with the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `heading`\n        - `Target`: `Heading 1::Subheading 1:1:1`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Append Content to a Block Reference\n        \n        If you wanted to append the content "Hello" below the block referenced by\n        "2d9b4a" above ("More random text."), you could send the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `block`\n        - `Target`: `2d9b4a`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Add a Row to a Table Referenced by a Block Reference\n        \n        If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above\n        referenced by the block reference `2c7cfa`, you could send the following\n        headers:\n        \n        - `Operation`: `append`\n        - `TargetType`: `block`\n        - `Target`: `2c7cfa`\n        - `Content-Type`: `application/json`\n        - with the request body: `[["Chicago, IL", "16"]]`\n        \n        The use of a `Content-Type` of `application/json` allows the API\n        to infer that member of your array represents rows and columns of your\n        to append to the referenced table.  You can of course just use a\n        `Content-Type` of `text/markdown`, but in such a case you\'ll have to\n        format your table row manually instead of letting the library figure\n        it out for you.\n        \n        You also have the option of using `prepend` (in which case, your new\n        row would be the first -- right below the table heading) or `replace` (in which\n        case all rows except the table heading would be replaced by the new row(s)\n        you supplied).\n        \n        ## Setting a Frontmatter Field\n        \n        If you wanted to set the frontmatter field `alpha` to `2`, you could\n        send the following headers:\n        \n        - `Operation`: `replace`\n        - `TargetType`: `frontmatter`\n        - `Target`: `beep`\n        - with the request body `2`\n        \n        If you\'re setting a frontmatter field that might not already exist\n        you may want to use the `Create-Target-If-Missing` header so the\n        new frontmatter field is created and set to your specified value\n        if it doesn\'t already exist.\n        \n        You may find using a `Content-Type` of `application/json` to be\n        particularly useful in the case of frontmatter since frontmatter\n        fields\' values are JSON data, and the API can be smarter about\n        interpreting yoru `prepend` or `append` requests if you specify\n        your data as JSON (particularly when appending, for example,\n        list items).\n      parameters:\n        - description: "Patch operation to perform"\n          in: "header"\n          name: "Operation"\n          required: true\n          schema:\n            enum:\n              - "append"\n              - "prepend"\n              - "replace"\n            type: "string"\n        - description: "Type of target to patch"\n          in: "header"\n          name: "Target-Type"\n          required: true\n          schema:\n            enum:\n              - "heading"\n              - "block"\n              - "frontmatter"\n            type: "string"\n        - description: "Delimiter to use for nested targets (i.e. Headings)"\n          in: "header"\n          name: "Target-Delimiter"\n          required: false\n          schema:\n            default: "::"\n            type: "string"\n        - description: |\n            Target to patch; this value can be URL-Encoded and *must*\n            be URL-Encoded if it includes non-ASCII characters.\n          in: "header"\n          name: "Target"\n          required: true\n          schema:\n            type: "string"\n        - description: "Trim whitespace from Target before applying patch?"\n          in: "header"\n          name: "Trim-Target-Whitespace"\n          required: false\n          schema:\n            default: "false"\n            enum:\n              - "true"\n              - "false"\n            type: "string"\n        - description: "The year of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "year"\n          required: true\n          schema:\n            type: "number"\n        - description: "The month (1-12) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "month"\n          required: true\n          schema:\n            type: "number"\n        - description: "The day (1-31) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "day"\n          required: true\n          schema:\n            type: "number"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example: "[\'one\', \'two\']"\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to insert."\n        required: true\n      responses:\n        "200":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request; see response message for details."\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Does not exist"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Partially update content in the periodic note for the specified period and date.\n      tags:\n        - "Periodic Notes"\n    post:\n      description: |\n        This will create the relevant periodic note if necessary.\n      parameters:\n        - description: "The year of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "year"\n          required: true\n          schema:\n            type: "number"\n        - description: "The month (1-12) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "month"\n          required: true\n          schema:\n            type: "number"\n        - description: "The day (1-31) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "day"\n          required: true\n          schema:\n            type: "number"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to append."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Append content to the periodic note for the specified period and date.\n      tags:\n        - "Periodic Notes"\n    put:\n      parameters:\n        - description: "The year of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "year"\n          required: true\n          schema:\n            type: "number"\n        - description: "The month (1-12) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "month"\n          required: true\n          schema:\n            type: "number"\n        - description: "The day (1-31) of the date for which you would like to grab a periodic note."\n          in: "path"\n          name: "day"\n          required: true\n          schema:\n            type: "number"\n        - description: "The name of the period for which you would like to grab a periodic note."\n          in: "path"\n          name: "period"\n          required: true\n          schema:\n            default: "daily"\n            enum:\n              - "daily"\n              - "weekly"\n              - "monthly"\n              - "quarterly"\n              - "yearly"\n            type: "string"\n      requestBody:\n        content:\n          "*/*":\n            schema:\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content of the file you would like to upload."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable \'Content-Type\' header; if you are uploading a note, \'text/markdown\' is likely the right choice.\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Update the content of the periodic note for the specified period and date.\n      tags:\n        - "Periodic Notes"\n  /search/:\n    post:\n      description: |\n        Evaluates a provided query against each file in your vault.\n        \n        This endpoint supports multiple query formats.  Your query should be specified in your request\'s body, and will be interpreted according to the `Content-type` header you specify from the below options.Additional query formats may be added in the future.\n        \n        # Dataview DQL (`application/vnd.olrapi.dataview.dql+txt`)\n        \n        Accepts a `TABLE`-type Dataview query as a text string.  See [Dataview](https://blacksmithgu.github.io/obsidian-dataview/query/queries/)\'s query documentation for information on how to construct a query.\n        \n        # JsonLogic (`application/vnd.olrapi.jsonlogic+json`)\n        \n        Accepts a JsonLogic query specified as JSON.  See [JsonLogic](https://jsonlogic.com/operations.html)\'s documentation for information about the base set of operators available, but in addition to those operators the following operators are available:\n        \n        - `glob: [PATTERN, VALUE]`: Returns `true` if a string matches a glob pattern.  E.g.: `{"glob": ["*.foo", "bar.foo"]}` is `true` and `{"glob": ["*.bar", "bar.foo"]}` is `false`.\n        - `regexp: [PATTERN, VALUE]`: Returns `true` if a string matches a regular expression.  E.g.: `{"regexp": [".*\\.foo", "bar.foo"]` is `true` and `{"regexp": [".*\\.bar", "bar.foo"]}` is `false`.\n        \n        Returns only non-falsy results.  "Non-falsy" here treats the following values as "falsy":\n        \n        - `false`\n        - `null` or `undefined`\n        - `0`\n        - `[]`\n        - `{}`\n        \n        Files are represented as an object having the schema described\n        in the Schema named \'NoteJson\' at the bottom of this page.\n        Understanding the shape of a JSON object from a schema can be\n        tricky; so you may find it helpful to examine the generated metadata\n        for individual files in your vault to understand exactly what values\n        are returned.  To see that, access the `GET` `/vault/{filePath}`\n        route setting the header:\n        `Accept: application/vnd.olrapi.note+json`.  See examples below\n        for working examples of queries performing common search operations.\n      requestBody:\n        content:\n          "application/vnd.olrapi.dataview.dql+txt":\n            examples:\n              find_fields_by_tag:\n                summary: "List data from files having the #game tag."\n                value: |\n                  TABLE\n                    time-played AS "Time Played",\n                    length AS "Length",\n                    rating AS "Rating"\n                  FROM #game\n                  SORT rating DESC\n            schema:\n              externalDocs:\n                url: "https://blacksmithgu.github.io/obsidian-dataview/query/queries/"\n              type: "object"\n          "application/vnd.olrapi.jsonlogic+json":\n            examples:\n              find_by_frontmatter_url_glob:\n                summary: "Find notes having URL or a matching URL glob frontmatter field."\n                value: |\n                  {\n                    "or": [\n                      {"===": [{"var": "frontmatter.url"}, "https://myurl.com/some/path/"]},\n                      {"glob": [{"var": "frontmatter.url-glob"}, "https://myurl.com/some/path/"]}\n                    ]\n                  }\n              find_by_frontmatter_value:\n                summary: "Find notes having a certain frontmatter field value."\n                value: |\n                  {\n                    "==": [\n                      {"var": "frontmatter.myField"},\n                      "myValue"\n                    ]\n                  }\n              find_by_tag:\n                summary: "Find notes having a certain tag"\n                value: |\n                  {\n                    "in": [\n                      "myTag",\n                      {"var": "tags"}\n                    ]\n                  }\n            schema:\n              externalDocs:\n                url: "https://jsonlogic.com/operations.html"\n              type: "object"\n        required: true\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    filename:\n                      description: "Path to the matching file"\n                      type: "string"\n                    result:\n                      oneOf:\n                        - type: "string"\n                        - type: "number"\n                        - type: "array"\n                        - type: "object"\n                        - type: "boolean"\n                  required:\n                    - "filename"\n                    - "result"\n                  type: "object"\n                type: "array"\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Bad request.  Make sure you have specified an acceptable\n            Content-Type for your search query.\n      summary: |\n        Search for documents matching a specified search query\n      tags:\n        - "Search"\n  /search/simple/:\n    post:\n      parameters:\n        - description: "Your search query"\n          in: "query"\n          name: "query"\n          required: true\n          schema:\n            type: "string"\n        - description: "How much context to return around the matching string"\n          in: "query"\n          name: "contextLength"\n          required: false\n          schema:\n            default: 100\n            type: "number"\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    filename:\n                      description: "Path to the matching file"\n                      type: "string"\n                    matches:\n                      items:\n                        properties:\n                          context:\n                            type: "string"\n                          match:\n                            properties:\n                              end:\n                                type: "number"\n                              start:\n                                type: "number"\n                            required:\n                              - "start"\n                              - "end"\n                            type: "object"\n                        required:\n                          - "match"\n                          - "context"\n                        type: "object"\n                      type: "array"\n                    score:\n                      type: "number"\n                  type: "object"\n                type: "array"\n          description: "Success"\n      summary: |\n        Search for documents matching a specified text query\n      tags:\n        - "Search"\n  /vault/:\n    get:\n      description: |\n        Lists files in the root directory of your vault.\n        \n        Note: that this is exactly the same API endpoint as the below "List files that exist in the specified directory." and exists here only due to a quirk of this particular interactive tool.\n      responses:\n        "200":\n          content:\n            application/json:\n              example:\n                files:\n                  - "mydocument.md"\n                  - "somedirectory/"\n              schema:\n                properties:\n                  files:\n                    items:\n                      type: "string"\n                    type: "array"\n                type: "object"\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Directory does not exist"\n      summary: |\n        List files that exist in the root of your vault.\n      tags:\n        - "Vault Directories"\n  "/vault/{filename}":\n    delete:\n      parameters:\n        - description: |\n            Path to the relevant file (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      responses:\n        "204":\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "File does not exist."\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Delete a particular file in your vault.\n      tags:\n        - "Vault Files"\n    get:\n      description: |\n        Returns the content of the file at the specified path in your vault should the file exist.\n        \n        If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.\n      parameters:\n        - description: |\n            Path to the relevant file (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      responses:\n        "200":\n          content:\n            "application/vnd.olrapi.note+json":\n              schema:\n                "$ref": "#/components/schemas/NoteJson"\n            text/markdown:\n              schema:\n                example: |\n                  # This is my document\n                  \n                  something else here\n                type: "string"\n          description: "Success"\n        "404":\n          description: "File does not exist"\n      summary: |\n        Return the content of a single file in your vault.\n      tags:\n        - "Vault Files"\n    patch:\n      description: |\n        Inserts content into an existing note relative to a heading, block refeerence, or frontmatter field within that document.\n        \n        Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.\n        \n        Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.\n        \n        # Examples\n        \n        All of the below examples assume you have a document that looks like\n        this:\n        \n        ```markdown\n        ---\n        alpha: 1\n        beta: test\n        delta:\n        zeta: 1\n        yotta: 1\n        gamma:\n        - one\n        - two\n        ---\n        \n        # Heading 1\n        \n        This is the content for heading one\n        \n        Also references some [[#^484ef2]]\n        \n        ## Subheading 1:1\n        Content for Subheading 1:1\n        \n        ### Subsubheading 1:1:1\n        \n        ### Subsubheading 1:1:2\n        \n        Testing how block references work for a table.[[#^2c7cfa]]\n        Some content for Subsubheading 1:1:2\n        \n        More random text.\n        \n        ^2d9b4a\n        \n        ## Subheading 1:2\n        \n        Content for Subheading 1:2.\n        \n        some content with a block reference ^484ef2\n        \n        ## Subheading 1:3\n        | City         | Population |\n        | ------------ | ---------- |\n        | Seattle, WA  | 8          |\n        | Portland, OR | 4          |\n        \n        ^2c7cfa\n        ```\n        \n        ## Append Content Below a Heading\n        \n        If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",\n        you could send a request with the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `heading`\n        - `Target`: `Heading 1::Subheading 1:1:1`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Append Content to a Block Reference\n        \n        If you wanted to append the content "Hello" below the block referenced by\n        "2d9b4a" above ("More random text."), you could send the following headers:\n        \n        - `Operation`: `append`\n        - `Target-Type`: `block`\n        - `Target`: `2d9b4a`\n        - with the request body: `Hello`\n        \n        The above would work just fine for `prepend` or `replace`, too, of course,\n        but with different results.\n        \n        ## Add a Row to a Table Referenced by a Block Reference\n        \n        If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above\n        referenced by the block reference `2c7cfa`, you could send the following\n        headers:\n        \n        - `Operation`: `append`\n        - `TargetType`: `block`\n        - `Target`: `2c7cfa`\n        - `Content-Type`: `application/json`\n        - with the request body: `[["Chicago, IL", "16"]]`\n        \n        The use of a `Content-Type` of `application/json` allows the API\n        to infer that member of your array represents rows and columns of your\n        to append to the referenced table.  You can of course just use a\n        `Content-Type` of `text/markdown`, but in such a case you\'ll have to\n        format your table row manually instead of letting the library figure\n        it out for you.\n        \n        You also have the option of using `prepend` (in which case, your new\n        row would be the first -- right below the table heading) or `replace` (in which\n        case all rows except the table heading would be replaced by the new row(s)\n        you supplied).\n        \n        ## Setting a Frontmatter Field\n        \n        If you wanted to set the frontmatter field `alpha` to `2`, you could\n        send the following headers:\n        \n        - `Operation`: `replace`\n        - `TargetType`: `frontmatter`\n        - `Target`: `beep`\n        - with the request body `2`\n        \n        If you\'re setting a frontmatter field that might not already exist\n        you may want to use the `Create-Target-If-Missing` header so the\n        new frontmatter field is created and set to your specified value\n        if it doesn\'t already exist.\n        \n        You may find using a `Content-Type` of `application/json` to be\n        particularly useful in the case of frontmatter since frontmatter\n        fields\' values are JSON data, and the API can be smarter about\n        interpreting yoru `prepend` or `append` requests if you specify\n        your data as JSON (particularly when appending, for example,\n        list items).\n      parameters:\n        - description: "Patch operation to perform"\n          in: "header"\n          name: "Operation"\n          required: true\n          schema:\n            enum:\n              - "append"\n              - "prepend"\n              - "replace"\n            type: "string"\n        - description: "Type of target to patch"\n          in: "header"\n          name: "Target-Type"\n          required: true\n          schema:\n            enum:\n              - "heading"\n              - "block"\n              - "frontmatter"\n            type: "string"\n        - description: "Delimiter to use for nested targets (i.e. Headings)"\n          in: "header"\n          name: "Target-Delimiter"\n          required: false\n          schema:\n            default: "::"\n            type: "string"\n        - description: |\n            Target to patch; this value can be URL-Encoded and *must*\n            be URL-Encoded if it includes non-ASCII characters.\n          in: "header"\n          name: "Target"\n          required: true\n          schema:\n            type: "string"\n        - description: "Trim whitespace from Target before applying patch?"\n          in: "header"\n          name: "Trim-Target-Whitespace"\n          required: false\n          schema:\n            default: "false"\n            enum:\n              - "true"\n              - "false"\n            type: "string"\n        - description: |\n            Path to the relevant file (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example: "[\'one\', \'two\']"\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to insert."\n        required: true\n      responses:\n        "200":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request; see response message for details."\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Does not exist"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Partially update content in an existing note.\n      tags:\n        - "Vault Files"\n    post:\n      description: |\n        Appends content to the end of an existing note. If the specified file does not yet exist, it will be created as an empty file.\n        \n        If you would like to insert text relative to a particular heading, block reference, or frontmatter field instead of appending to the end of the file, see \'patch\'.\n      parameters:\n        - description: |\n            Path to the relevant file (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      requestBody:\n        content:\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content you would like to append."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Bad Request"\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Append content to a new or existing file.\n      tags:\n        - "Vault Files"\n    put:\n      description: |\n        Creates a new file in your vault or updates the content of an existing one if the specified file already exists.\n      parameters:\n        - description: |\n            Path to the relevant file (relative to your vault root).\n          in: "path"\n          name: "filename"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      requestBody:\n        content:\n          "*/*":\n            schema:\n              type: "string"\n          text/markdown:\n            schema:\n              example: |\n                # This is my document\n                \n                something else here\n              type: "string"\n        description: "Content of the file you would like to upload."\n        required: true\n      responses:\n        "204":\n          description: "Success"\n        "400":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable \'Content-Type\' header; if you are uploading a note, \'text/markdown\' is likely the right choice.\n        "405":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: |\n            Your path references a directory instead of a file; this request method is valid only for updating files.\n      summary: |\n        Create a new file in your vault or update the content of an existing one.\n      tags:\n        - "Vault Files"\n  "/vault/{pathToDirectory}/":\n    get:\n      parameters:\n        - description: |\n            Path to list files from (relative to your vault root).  Note that empty directories will not be returned.\n            \n            Note: this particular interactive tool requires that you provide an argument for this field, but the API itself will allow you to list the root folder of your vault. If you would like to try listing content in the root of your vault using this interactive tool, use the above "List files that exist in the root of your vault" form above.\n          in: "path"\n          name: "pathToDirectory"\n          required: true\n          schema:\n            format: "path"\n            type: "string"\n      responses:\n        "200":\n          content:\n            application/json:\n              example:\n                files:\n                  - "mydocument.md"\n                  - "somedirectory/"\n              schema:\n                properties:\n                  files:\n                    items:\n                      type: "string"\n                    type: "array"\n                type: "object"\n          description: "Success"\n        "404":\n          content:\n            application/json:\n              schema:\n                "$ref": "#/components/schemas/Error"\n          description: "Directory does not exist"\n      summary: |\n        List files that exist in the specified directory.\n      tags:\n        - "Vault Directories"\nsecurity:\n  - apiKeyAuth: []\nservers:\n  - description: "HTTPS (Secure Mode)"\n    url: "https://{host}:{port}"\n    variables:\n      host:\n        default: "127.0.0.1"\n        description: "Binding host"\n      port:\n        default: "27124"\n        description: "HTTPS port"\n  - description: "HTTP (Insecure Mode)"\n    url: "http://{host}:{port}"\n    variables:\n      host:\n        default: "127.0.0.1"\n        description: "Binding host"\n      port:\n        default: "27123"\n        description: "HTTP port"\n';
57786:    if (authorizationHeader === `Bearer ${this.settings.apiKey}`) {
57796:        "/openapi.yaml"
58583:    this.api.route("/vault/*").get(this.vaultGet.bind(this)).put(this.vaultPut.bind(this)).patch(this.vaultPatch.bind(this)).post(this.vaultPost.bind(this)).delete(this.vaultDelete.bind(this));
58586:    this.api.route("/commands/").get(this.commandGet.bind(this));
58587:    this.api.route("/commands/:commandId/").post(this.commandPost.bind(this));
58588:    this.api.route("/search/").post(this.searchQueryPost.bind(this));
58589:    this.api.route("/search/simple/").post(this.searchSimplePost.bind(this));
58590:    this.api.route("/open/*").post(this.openPost.bind(this));
58592:    this.api.get("/openapi.yaml", this.openapiYamlGet.bind(this));
58613:      if (!this.settings.apiKey) {
58614:        this.settings.apiKey = import_node_forge2.default.md.sha256.create().update(import_node_forge2.default.random.getBytesSync(128)).digest().toHex();
58782:    const apiKeyDiv = containerEl.createEl("div");
58783:    apiKeyDiv.classList.add("api-key-display");
58784:    const availableApis = apiKeyDiv.createEl("p");
58788:    const connectionUrls = apiKeyDiv.createEl("table", { cls: "api-urls" });
58853:    const inOrderToAccess = apiKeyDiv.createEl("p");
58856:      <a href="javascript:navigator.clipboard.writeText('${this.plugin.settings.apiKey}')">(copy)</a>:
58858:    apiKeyDiv.createEl("pre", { text: this.plugin.settings.apiKey });
58859:    apiKeyDiv.createEl("p", {
58862:    apiKeyDiv.createEl("pre", {
58863:      text: `GET /vault/ HTTP/1.1
58864:${(_a = this.plugin.settings.authorizationHeaderName) != null ? _a : "Authorization"}: Bearer ${this.plugin.settings.apiKey}`
58866:    const seeMore = apiKeyDiv.createEl("p");
58874:      const expiredCertDiv = apiKeyDiv.createEl("div");
58883:      const soonExpiringCertDiv = apiKeyDiv.createEl("div");
58893:      const shouldRegenerateCertificateDiv = apiKeyDiv.createEl("div");
58919:        delete this.plugin.settings.apiKey;
59010:          this.plugin.settings.apiKey = value;
59013:        }).setValue(this.plugin.settings.apiKey);
59309:/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
