name: build-windows

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  # Variante ONLINE: entregas solo app.exe. La primera vez descargará Chromium.
  build-online:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # fija versión para builds reproducibles

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install -U pip wheel
          if (Test-Path requirements.txt) {
            python -m pip install -r requirements.txt
          }
          python -m pip install pyinstaller playwright

      - name: Clean previous builds and spec files
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Get-ChildItem -Filter *.spec -ErrorAction SilentlyContinue) { Remove-Item -Force *.spec }

      - name: Build (onefile)
        shell: pwsh
        run: pyinstaller --onefile --collect-all playwright --windowed --name app app.py

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: app-win-online
          path: dist/app.exe
          if-no-files-found: error
          retention-days: 14

  # Variante OFFLINE: incluye navegadores en dist/ms-playwright (no requiere internet al primer uso).
  build-offline:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install -U pip wheel
          if (Test-Path requirements.txt) {
            python -m pip install -r requirements.txt
          }
          python -m pip install pyinstaller playwright

      - name: Clean previous builds and spec files
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Get-ChildItem -Filter *.spec -ErrorAction SilentlyContinue) { Remove-Item -Force *.spec }

      - name: Build (onefile)
        shell: pwsh
        run: pyinstaller --onefile --collect-all playwright --windowed --name app app.py

      # Preinstala Chromium en la misma carpeta donde estará el .exe
      - name: Pre-bundle Chromium into dist/ms-playwright
        shell: pwsh
        run: |
          $dist = (Resolve-Path dist).Path
          $env:PLAYWRIGHT_BROWSERS_PATH = "$dist\ms-playwright"
          python -m playwright install chromium
          Write-Host "Browsers installed in $env:PLAYWRIGHT_BROWSERS_PATH"

      - name: Package ZIP (exe + ms-playwright)
        shell: pwsh
        run: |
          Set-Location dist
          if (Test-Path AcumbaAutomation-win64.zip) { Remove-Item AcumbaAutomation-win64.zip -Force }
          Compress-Archive -Path app.exe, ms-playwright -DestinationPath AcumbaAutomation-win64.zip

      - name: Upload artifact (offline zip)
        uses: actions/upload-artifact@v4
        with:
          name: app-win-offline
          path: dist/AcumbaAutomation-win64.zip
          if-no-files-found: error
          retention-days: 14