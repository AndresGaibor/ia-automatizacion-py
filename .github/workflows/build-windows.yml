name: build-windows

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write  # necesario para crear/releases

jobs:
  build-online:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Cache PyInstaller build
        uses: actions/cache@v4
        with:
          path: |
            build
            *.spec
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('**/*.py', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install -U pip wheel setuptools
          # Instalar todas las dependencias desde requirements.txt (incluye playwright)
          pip install -r requirements.txt
          # Instalar PyInstaller para el build
          pip install pyinstaller

      # Solo instalar navegadores si no están en cache (ahorra 3-5 minutos)
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Cache miss - Instalando navegadores Playwright..."
          playwright install chromium

      # Limpieza selectiva: solo dist/ (build/ y *.spec se cachean)
      - name: Clean previous builds
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }

      - name: Build with app.spec
        shell: pwsh
        run: |
          # Usar app.spec que incluye configuraciones de SSL, certifi y todos los módulos necesarios
          pyinstaller app.spec

      - name: Test executable
        shell: pwsh
        run: |
          # Verificar que el ejecutable se creó
          if (!(Test-Path dist/acumba-automation.exe)) {
            Write-Error "El ejecutable no se creó correctamente"
            exit 1
          }
          # Verificar tamaño del ejecutable (debe ser > 50MB por Playwright)
          $size = (Get-Item dist/acumba-automation.exe).Length / 1MB
          Write-Host "Tamaño del ejecutable: $($size) MB"
          if ($size -lt 50) {
            Write-Warning "El ejecutable parece muy pequeño ($($size) MB). Puede que falten dependencias."
          }

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: acumba-automation-win
          path: dist/acumba-automation.exe
          if-no-files-found: error
          retention-days: 14

      # Opcional: renombrar con la versión del tag
      - name: Rename binary with tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: Copy-Item dist/acumba-automation.exe "dist/acumba-automation-win-${{ github.ref_name }}.exe"

      # Publicar en GitHub Releases cuando sea un tag v*
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/acumba-automation-win-${{ github.ref_name }}.exe
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}